///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        19/May/2018  20:17:34 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\梁宇\项目2\zigbee读取MPU6050                   /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\Source\MPU6050.c        /
//    Command line       =  -f "E:\梁宇\项目2\zigbee读取MPU6050               /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools /
//                          \CC2530DB\f8wCoord.cfg" (-DCPU32MHZ               /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "E:\梁宇\项目2\zigbee读取MPU6050               /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools /
//                          \CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0  /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xF000                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "E:\梁宇\项目2\zigbee读取M /
//                          PU6050 WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\P /
//                          rojects\zstack\Samples\SampleApp\Source\MPU6050.c /
//                          " -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D        /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=FALSE -lC            /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\ /
//                          List\" -lA "E:\梁宇\项目2\zigbee读取MPU6050       /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\ /
//                          List\" --diag_suppress Pe001,Pa010 -o             /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\ /
//                          Obj\" -e --no_code_motion --debug --core=plain    /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\" -I           /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\Source\"    /
//                          -I "E:\梁宇\项目2\zigbee读取MPU6050               /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain /
//                          \TI2530DB\" -I "E:\梁宇\项目2\zigbee读取MPU6050   /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\include\" -I                      /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\target\CC2530EB\" -I              /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\include\" -I                      /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\high_level\" -I                   /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\" -I              /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\single_chip\" -I  /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mt\" -I "E:\梁宇\项目2\zigbee读取MPU6 /
//                          050 WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\Components\osal\include\" -I                 /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\services\saddr\" -I                   /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\services\sdata\" -I                   /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\af\" -I                         /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\nwk\" -I                        /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sapi\" -I                       /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sec\" -I                        /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sys\" -I                        /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\zdo\" -I                        /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\" -I "E:\梁宇\项目2\zigbee读取MP /
//                          U6050 WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\zmac\f8w\" -Ohz                 /
//                          --require_prototypes                              /
//    List file          =  E:\梁宇\项目2\zigbee读取MPU6050                   /
//                          WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\ /
//                          List\MPU6050.s51                                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MPU6050

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ALLInit?relay
        FUNCTION ??ALLInit?relay,0203H
        PUBLIC ??I2C_RecvACK?relay
        FUNCTION ??I2C_RecvACK?relay,0203H
        PUBLIC ??I2C_RecvByte?relay
        FUNCTION ??I2C_RecvByte?relay,0203H
        PUBLIC ??I2C_SendACK?relay
        FUNCTION ??I2C_SendACK?relay,0203H
        PUBLIC ??I2C_SendByte?relay
        FUNCTION ??I2C_SendByte?relay,0203H
        PUBLIC ??I2C_Start?relay
        FUNCTION ??I2C_Start?relay,0203H
        PUBLIC ??I2C_Stop?relay
        FUNCTION ??I2C_Stop?relay,0203H
        PUBLIC ??InitMPU6050?relay
        FUNCTION ??InitMPU6050?relay,0203H
        PUBLIC ??Init_IO?relay
        FUNCTION ??Init_IO?relay,0203H
        PUBLIC ??Multiple_read_MPU6050?relay
        FUNCTION ??Multiple_read_MPU6050?relay,0203H
        PUBLIC ??ReadSDA?relay
        FUNCTION ??ReadSDA?relay,0203H
        PUBLIC ??Single_ReadI2C?relay
        FUNCTION ??Single_ReadI2C?relay,0203H
        PUBLIC ??Single_WriteI2C?relay
        FUNCTION ??Single_WriteI2C?relay,0203H
        PUBLIC ??WriteSCL_0?relay
        FUNCTION ??WriteSCL_0?relay,0203H
        PUBLIC ??WriteSCL_1?relay
        FUNCTION ??WriteSCL_1?relay,0203H
        PUBLIC ??WriteSDA_0?relay
        FUNCTION ??WriteSDA_0?relay,0203H
        PUBLIC ??WriteSDA_1?relay
        FUNCTION ??WriteSDA_1?relay,0203H
        PUBLIC ??delay_usec?relay
        FUNCTION ??delay_usec?relay,0203H
        PUBLIC ALLInit
        FUNCTION ALLInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC I2C_RecvACK
        FUNCTION I2C_RecvACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC I2C_RecvByte
        FUNCTION I2C_RecvByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC I2C_SendACK
        FUNCTION I2C_SendACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC I2C_SendByte
        FUNCTION I2C_SendByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC I2C_Start
        FUNCTION I2C_Start,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC I2C_Stop
        FUNCTION I2C_Stop,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC InitMPU6050
        FUNCTION InitMPU6050,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Init_IO
        FUNCTION Init_IO,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Multiple_read_MPU6050
        FUNCTION Multiple_read_MPU6050,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC ReadSDA
        FUNCTION ReadSDA,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Single_ReadI2C
        FUNCTION Single_ReadI2C,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Single_WriteI2C
        FUNCTION Single_WriteI2C,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC WriteSCL_0
        FUNCTION WriteSCL_0,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteSCL_1
        FUNCTION WriteSCL_1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteSDA_0
        FUNCTION WriteSDA_0,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteSDA_1
        FUNCTION WriteSDA_1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK _A_P0
        PUBWEAK _A_PSW
        PUBLIC accX
        PUBLIC accY
        PUBLIC accZ
        PUBLIC delay_usec
        FUNCTION delay_usec,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC graX
        PUBLIC graY
        PUBLIC graZ
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
ALLInit             SYMBOL "ALLInit"
??ALLInit?relay     SYMBOL "?relay", ALLInit
I2C_RecvACK         SYMBOL "I2C_RecvACK"
??I2C_RecvACK?relay SYMBOL "?relay", I2C_RecvACK
I2C_RecvByte        SYMBOL "I2C_RecvByte"
??I2C_RecvByte?relay SYMBOL "?relay", I2C_RecvByte
I2C_SendACK         SYMBOL "I2C_SendACK"
??I2C_SendACK?relay SYMBOL "?relay", I2C_SendACK
I2C_SendByte        SYMBOL "I2C_SendByte"
??I2C_SendByte?relay SYMBOL "?relay", I2C_SendByte
I2C_Start           SYMBOL "I2C_Start"
??I2C_Start?relay   SYMBOL "?relay", I2C_Start
I2C_Stop            SYMBOL "I2C_Stop"
??I2C_Stop?relay    SYMBOL "?relay", I2C_Stop
InitMPU6050         SYMBOL "InitMPU6050"
??InitMPU6050?relay SYMBOL "?relay", InitMPU6050
Init_IO             SYMBOL "Init_IO"
??Init_IO?relay     SYMBOL "?relay", Init_IO
Multiple_read_MPU6050 SYMBOL "Multiple_read_MPU6050"
??Multiple_read_MPU6050?relay SYMBOL "?relay", Multiple_read_MPU6050
ReadSDA             SYMBOL "ReadSDA"
??ReadSDA?relay     SYMBOL "?relay", ReadSDA
Single_ReadI2C      SYMBOL "Single_ReadI2C"
??Single_ReadI2C?relay SYMBOL "?relay", Single_ReadI2C
Single_WriteI2C     SYMBOL "Single_WriteI2C"
??Single_WriteI2C?relay SYMBOL "?relay", Single_WriteI2C
WriteSCL_0          SYMBOL "WriteSCL_0"
??WriteSCL_0?relay  SYMBOL "?relay", WriteSCL_0
WriteSCL_1          SYMBOL "WriteSCL_1"
??WriteSCL_1?relay  SYMBOL "?relay", WriteSCL_1
WriteSDA_0          SYMBOL "WriteSDA_0"
??WriteSDA_0?relay  SYMBOL "?relay", WriteSDA_0
WriteSDA_1          SYMBOL "WriteSDA_1"
??WriteSDA_1?relay  SYMBOL "?relay", WriteSDA_1
delay_usec          SYMBOL "delay_usec"
??delay_usec?relay  SYMBOL "?relay", delay_usec

// E:\梁宇\项目2\zigbee读取MPU6050 WIN2.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zstack\Samples\SampleApp\Source\MPU6050.c
//    1 /******************************************************************************
//    2  * INCLUDES
//    3  */
//    4 
//    5 #include "ioCC2530.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d0H
// union <unnamed> volatile __sfr _A_PSW
_A_PSW:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    6 #include"MPU6050.h"
//    7 #include "OnBoard.h"
//    8 #include "hal_types.h"
//    9 
//   10 #define uint  unsigned int
//   11 #define uchar unsigned char

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   12 int accX,accY,accZ,graX,graY,graZ;
accX:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
accY:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
accZ:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
graX:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
graY:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
graZ:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   13 
//   14 void delay_usec(uchar u);
//   15 void WriteSDA_0(void);
//   16 void WriteSDA_1(void);
//   17 void WriteSCL_0(void);
//   18 void WriteSCL_1(void);
//   19 void ReadSDA(void);
//   20 void Init_IO(void);
//   21 void I2C_Start(void);
//   22 void I2C_Stop(void);
//   23 void I2C_SendACK(uchar ack);
//   24 uchar I2C_RecvACK(void);
//   25 void I2C_SendByte(uchar data);
//   26 uchar I2C_RecvByte(void);
//   27 void Single_WriteI2C(uchar REG_Address,uchar REG_data);
//   28 uchar Single_ReadI2C(uchar REG_Address);
//   29 void InitMPU6050(void);
//   30 void ALLInit(void);
//   31 void Multiple_read_MPU6050(void);
//   32 void type_change(int num);
//   33 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   34 void ALLInit(void)
ALLInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ALLInit
        CODE
//   35 {
        FUNCALL ALLInit, Init_IO
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ALLInit, InitMPU6050
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   36    Init_IO();
        ; Setup parameters for call to function Init_IO
        LCALL   ??Init_IO?relay
//   37    InitMPU6050();
        ; Setup parameters for call to function InitMPU6050
        LCALL   ??InitMPU6050?relay
//   38 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//   39 
//   40 /****************us延时函数 32M晶振 单周期MCU********************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   41 void delay_usec(uchar u)
delay_usec:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function delay_usec
        CODE
//   42 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??delay_usec_0
//   43   while(u --)
//   44   {
//   45     /* 32 NOPs == 1 usecs */
//   46     asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
??delay_usec_1:
        nop
        nop
        nop
        nop
//   47     asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
        nop
        nop
        nop
        nop
//   48     asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
        nop
        nop
        nop
        nop
//   49     asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
        nop
        nop
        nop
        nop
//   50     asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
//   51     asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
        nop
        nop
        nop
        nop
//   52     asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
        nop
        nop
        nop
        nop
//   53     asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
//   54   }
??delay_usec_0:
        MOV     A,R1
        MOV     R0,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R1
        INC     A
        JNZ     ??delay_usec_1
//   55 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//   56 
//   57 /*****************************MPU6050*******************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   58 void WriteSDA_0(void) 
WriteSDA_0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function WriteSDA_0
        CODE
//   59 {
        ; Saved register size: 0
        ; Auto size: 0
//   60     P0DIR|=0x40;
        ORL     0xfd,#0x40
//   61     SDA=0;
        CLR     0x80.7
//   62 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE P0DIR
        REQUIRE _A_P0
//   63 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   64 void WriteSDA_1() 
WriteSDA_1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function WriteSDA_1
        CODE
//   65 {
        ; Saved register size: 0
        ; Auto size: 0
//   66     P0DIR|=0x40;
        ORL     0xfd,#0x40
//   67     SDA=1;
        SETB    0x80.7
//   68 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
        REQUIRE P0DIR
        REQUIRE _A_P0
//   69     

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   70 void WriteSCL_0()    
WriteSCL_0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function WriteSCL_0
        CODE
//   71 {
        ; Saved register size: 0
        ; Auto size: 0
//   72     P0DIR|=0x80;
        ORL     0xfd,#0x80
//   73     SCL=0;
        CLR     0x80.6
//   74 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
        REQUIRE P0DIR
        REQUIRE _A_P0
//   75 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   76 void WriteSCL_1()    
WriteSCL_1:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function WriteSCL_1
        CODE
//   77 {
        ; Saved register size: 0
        ; Auto size: 0
//   78     P0DIR|=0x80;
        ORL     0xfd,#0x80
//   79     SCL=1;
        SETB    0x80.6
//   80 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
        REQUIRE P0DIR
        REQUIRE _A_P0
//   81 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   82 void ReadSDA(void)//sda输入,=0
ReadSDA:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ReadSDA
        CODE
//   83 {
        ; Saved register size: 0
        ; Auto size: 0
//   84     P0DIR&=0xBF;
        ANL     0xfd,#0xbf
//   85 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
        REQUIRE P0DIR
//   86 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   87 void Init_IO(void)
Init_IO:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Init_IO
        CODE
//   88 {
        ; Saved register size: 0
        ; Auto size: 0
//   89   P0DIR|=0xc0;
        ORL     0xfd,#0xc0
//   90   P0SEL&=0x3f;
        ANL     0xf3,#0x3f
//   91 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
        REQUIRE P0DIR
        REQUIRE P0SEL
//   92 
//   93 
//   94 //I2C起始信号

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   95 void I2C_Start()  
I2C_Start:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function I2C_Start
        CODE
//   96 {
        FUNCALL I2C_Start, WriteSDA_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Start, WriteSCL_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Start, delay_usec
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Start, WriteSDA_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Start, delay_usec
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Start, WriteSCL_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Start, delay_usec
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   97     WriteSDA_1();
        ; Setup parameters for call to function WriteSDA_1
        LCALL   ??WriteSDA_1?relay
//   98     WriteSCL_1();
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine3 & 0xFFFF
//   99     delay_usec(50);
//  100     WriteSDA_0();
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function WriteSDA_0
        LCALL   ??WriteSDA_0?relay
//  101     delay_usec(50);
        ; Setup parameters for call to function delay_usec
        LCALL   ??Subroutine6_0 & 0xFFFF
//  102     WriteSCL_0();
//  103     delay_usec(50);
//  104 }
??CrossCallReturnLabel_20:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        LCALL   ??WriteSCL_1?relay
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
        ; Setup parameters for call to function delay_usec
        ; Setup parameters for call to function delay_usec
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     R1,#0x32
        LCALL   ??delay_usec?relay
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
        ; Setup parameters for call to function WriteSCL_0
        ; Setup parameters for call to function WriteSCL_0
        ; Setup parameters for call to function WriteSCL_0
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine7_0:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond18) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond18) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond18) CFA_SP SP+-5
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL   ??WriteSCL_0?relay
        ; Setup parameters for call to function delay_usec
        ; Setup parameters for call to function delay_usec
        ; Setup parameters for call to function delay_usec
        ; Setup parameters for call to function delay_usec
        ; Setup parameters for call to function delay_usec
        MOV     R1,#0x32
        LCALL   ??delay_usec?relay
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21
//  105 
//  106 //I2C停止信号

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  107 void I2C_Stop()  
I2C_Stop:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function I2C_Stop
        CODE
//  108 {    
        FUNCALL I2C_Stop, WriteSDA_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Stop, WriteSCL_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Stop, delay_usec
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_Stop, WriteSDA_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  109    WriteSDA_0();
        ; Setup parameters for call to function WriteSDA_0
        LCALL   ??WriteSDA_0?relay
//  110    WriteSCL_1();
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine3 & 0xFFFF
//  111    delay_usec(50);
//  112    WriteSDA_1();
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function WriteSDA_1
        LCALL   ??WriteSDA_1?relay
        CFI EndBlock cfiBlock22
//  113 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock23
//  114 
//  115 //I2C发送应答信号
//  116 //入口参数:ack (0:ACK 1:NAK)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  117 void I2C_SendACK(uchar ack)
I2C_SendACK:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function I2C_SendACK
        CODE
//  118 {
        FUNCALL I2C_SendACK, WriteSCL_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_SendACK, delay_usec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_SendACK, WriteSCL_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_SendACK, delay_usec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  119     
//  120     SDA=ack;                     //写应答信号
        MOV     C,0xE0 /* A   */.0
        MOV     0x80.7,C
//  121     WriteSCL_1();                   //拉高时钟线
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine2 & 0xFFFF
//  122     delay_usec(50);//Delay5us();    //延时
//  123     WriteSCL_0();                   //拉低时钟线
//  124     delay_usec(50);//Delay5us();    //延时
//  125 }
??CrossCallReturnLabel_18:
        SJMP    ??Subroutine8_0
        CFI EndBlock cfiBlock24
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     R1,A
        CFI EndBlock cfiBlock25
        REQUIRE ??Subroutine8_0
        ; // Fall through to label ??Subroutine8_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine8_0:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock26
//  126 
//  127 //I2C接收应答信号

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  128 uchar I2C_RecvACK()
I2C_RecvACK:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function I2C_RecvACK
        CODE
//  129 {
        FUNCALL I2C_RecvACK, WriteSCL_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_RecvACK, delay_usec
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_RecvACK, WriteSCL_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_RecvACK, delay_usec
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  130     ReadSDA();
        ANL     0xfd,#0xbf
//  131     WriteSCL_1();                       //拉高时钟线
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine3 & 0xFFFF
//  132     delay_usec(50);//Delay5us();    //延时
//  133     CY=SDA;                      //读应答信号
??CrossCallReturnLabel_2:
        MOV     C,0x80.7
        MOV     0xd0.7,C
//  134     WriteSCL_0();                       //拉低时钟线
        ; Setup parameters for call to function WriteSCL_0
        LCALL   ??Subroutine7_0 & 0xFFFF
//  135     delay_usec(50);//Delay5us();    //延时
//  136     P0DIR|=0x20;
??CrossCallReturnLabel_21:
        ORL     0xfd,#0x20
//  137     return CY;
        MOV     C,0xd0.7
        CLR     A
        RLC     A
        MOV     R1,A
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock27
        REQUIRE _A_PSW
        REQUIRE _A_P0
        REQUIRE P0DIR
//  138 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond29) CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond30) CFA_SP SP+-5
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        LCALL   ??WriteSCL_1?relay
        ; Setup parameters for call to function delay_usec
        ; Setup parameters for call to function delay_usec
        ; Setup parameters for call to function delay_usec
        ; Setup parameters for call to function delay_usec
        MOV     R1,#0x32
        LCALL   ??delay_usec?relay
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32
//  139 
//  140 //向I2C总线发送一个字节数据

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  141 void I2C_SendByte(uchar data)
I2C_SendByte:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function I2C_SendByte
        CODE
//  142 {
        FUNCALL I2C_SendByte, WriteSDA_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_SendByte, WriteSDA_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_SendByte, WriteSCL_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_SendByte, delay_usec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_SendByte, WriteSCL_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_SendByte, delay_usec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_SendByte, I2C_RecvACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  143     uchar i;
//  144     SDA_OUT();
        ORL     0xfd,#0x80
//  145     
//  146     for(i=0;i<8;i++)         //8位计数器
        MOV     R6,#0x8
//  147     {       
//  148         if(data&0x80)
??I2C_SendByte_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JNC     ??I2C_SendByte_1
//  149         {WriteSDA_1();}
        ; Setup parameters for call to function WriteSDA_1
        LCALL   ??WriteSDA_1?relay
        SJMP    ??I2C_SendByte_2
//  150         else 
//  151         {WriteSDA_0();}
??I2C_SendByte_1:
        ; Setup parameters for call to function WriteSDA_0
        LCALL   ??WriteSDA_0?relay
//  152         
//  153         data<<=1;
??I2C_SendByte_2:
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R7,A
//  154         WriteSCL_1();            //拉高时钟线
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine2 & 0xFFFF
//  155         delay_usec(50);          //延时
//  156         WriteSCL_0();            //拉低时钟线
//  157         delay_usec(50);          //延时
//  158     }
??CrossCallReturnLabel_19:
        DEC     R6
        MOV     A,R6
        JNZ     ??I2C_SendByte_0
//  159     I2C_RecvACK();
        ; Setup parameters for call to function I2C_RecvACK
        LCALL   ??I2C_RecvACK?relay
//  160 }
        SJMP    ??Subroutine8_0
        CFI EndBlock cfiBlock33
        REQUIRE P0DIR
//  161 
//  162 
//  163 //从I2C总线接收一个字节数据

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  164 uchar I2C_RecvByte()
I2C_RecvByte:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function I2C_RecvByte
        CODE
//  165 {
        FUNCALL I2C_RecvByte, WriteSDA_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_RecvByte, WriteSCL_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_RecvByte, delay_usec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_RecvByte, WriteSCL_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_RecvByte, delay_usec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL I2C_RecvByte, WriteSCL_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  166     uchar i;  
//  167     uchar data=0;
        MOV     R6,#0x0
//  168     
//  169     WriteSDA_1();                 //使能内部上拉,准备读取数据
        ; Setup parameters for call to function WriteSDA_1
        LCALL   ??WriteSDA_1?relay
//  170     
//  171     for(i=0;i<8;i++)
        MOV     R7,#0x8
//  172    {
//  173     WriteSCL_0();
??I2C_RecvByte_0:
        ; Setup parameters for call to function WriteSCL_0
        LCALL   ??Subroutine7_0 & 0xFFFF
//  174     delay_usec(50);
//  175     WriteSCL_1();
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine3 & 0xFFFF
//  176     delay_usec(50);
//  177     
//  178     ReadSDA();
??CrossCallReturnLabel_3:
        ANL     0xfd,#0xbf
//  179     CY=SDA;
        MOV     C,0x80.7
        MOV     0xd0.7,C
//  180     
//  181     if(CY)
        MOV     C,0xd0.7
        MOV     A,R6
        JNC     ??I2C_RecvByte_1
//  182     {
//  183       data=data << 1;
//  184       data=data|0x01;
        CLR     C
        RLC     A
        ORL     A,#0x1
        SJMP    ??I2C_RecvByte_2
//  185     }
//  186     else
//  187       data=data<<1;
??I2C_RecvByte_1:
        CLR     C
        RLC     A
??I2C_RecvByte_2:
        MOV     R6,A
//  188   }
        DEC     R7
        MOV     A,R7
        JNZ     ??I2C_RecvByte_0
//  189   WriteSCL_0();
        ; Setup parameters for call to function WriteSCL_0
        LCALL   ??WriteSCL_0?relay
//  190   SDA_OUT(); 
        ORL     0xfd,#0x80
//  191   return data; 
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock34
        REQUIRE _A_PSW
        REQUIRE _A_P0
        REQUIRE P0DIR
//  192 }
//  193 
//  194 //向I2C设备写入一个字节数据

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  195 void Single_WriteI2C(uchar REG_Address,uchar REG_data)
Single_WriteI2C:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function Single_WriteI2C
        CODE
//  196 {
        FUNCALL Single_WriteI2C, I2C_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_WriteI2C, I2C_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_WriteI2C, I2C_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_WriteI2C, I2C_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_WriteI2C, I2C_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  197     I2C_Start();                  //起始信号
        ; Setup parameters for call to function I2C_Start
        LCALL   ?Subroutine4 & 0xFFFF
//  198     I2C_SendByte(SlaveAddress);   //发送设备地址+写信号
//  199     I2C_SendByte(REG_Address);    //内部寄存器地址，
//  200     I2C_SendByte(REG_data);       //内部寄存器数据，
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function I2C_SendByte
        MOV     A,R6
        MOV     R1,A
        LCALL   ??I2C_SendByte?relay
//  201     I2C_Stop();                   //发送停止信号
        ; Setup parameters for call to function I2C_Stop
        LCALL   ??I2C_Stop?relay
//  202 }
        LJMP    ??Subroutine8_0 & 0xFFFF
        CFI EndBlock cfiBlock35
//  203 
//  204 //从I2C设备读取一个字节数据

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  205 uchar Single_ReadI2C(uchar REG_Address)
Single_ReadI2C:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function Single_ReadI2C
        CODE
//  206 {
        FUNCALL Single_ReadI2C, I2C_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, I2C_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, I2C_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, I2C_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, I2C_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, I2C_RecvByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, I2C_SendACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, I2C_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  207 	uchar REG_data;
//  208 	I2C_Start();                   //起始信号
        ; Setup parameters for call to function I2C_Start
        LCALL   ?Subroutine4 & 0xFFFF
//  209 	I2C_SendByte(SlaveAddress);    //发送设备地址+写信号
//  210 	I2C_SendByte(REG_Address);     //发送存储单元地址，从0开始	
//  211 	I2C_Start();                   //起始信号
??CrossCallReturnLabel_5:
        ; Setup parameters for call to function I2C_Start
        LCALL   ??I2C_Start?relay
//  212 	I2C_SendByte(SlaveAddress+1);  //发送设备地址+读信号
        ; Setup parameters for call to function I2C_SendByte
        MOV     R1,#-0x2f
        LCALL   ??I2C_SendByte?relay
//  213 	REG_data=I2C_RecvByte();       //读出寄存器数据
        ; Setup parameters for call to function I2C_RecvByte
        LCALL   ??I2C_RecvByte?relay
        MOV     A,R1
        MOV     R6,A
//  214 	I2C_SendACK(1);                //接收应答信号
        ; Setup parameters for call to function I2C_SendACK
        MOV     R1,#0x1
        LCALL   ??I2C_SendACK?relay
//  215 	I2C_Stop();                    //停止信号
        ; Setup parameters for call to function I2C_Stop
        LCALL   ??I2C_Stop?relay
//  216 	return REG_data;
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock36
//  217 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        LCALL   ??I2C_Start?relay
        ; Setup parameters for call to function I2C_SendByte
        ; Setup parameters for call to function I2C_SendByte
        MOV     R1,#-0x30
        LCALL   ??I2C_SendByte?relay
        ; Setup parameters for call to function I2C_SendByte
        ; Setup parameters for call to function I2C_SendByte
        MOV     A,R7
        MOV     R1,A
        LCALL   ??I2C_SendByte?relay
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39
//  218 
//  219 //初始化MPU6050

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  220 void InitMPU6050()
InitMPU6050:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function InitMPU6050
        CODE
//  221 {
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  222 	Single_WriteI2C(PWR_MGMT_1,0x00);	//解除休眠状态
        ; Setup parameters for call to function Single_WriteI2C
        MOV     R2,#0x0
        MOV     R1,#0x6b
        LCALL   ??Single_WriteI2C?relay
//  223 	Single_WriteI2C(SMPLRT_DIV,0x07);
        ; Setup parameters for call to function Single_WriteI2C
        MOV     R2,#0x7
        MOV     R1,#0x19
        LCALL   ??Single_WriteI2C?relay
//  224 	Single_WriteI2C(CONFIG,0x06);
        ; Setup parameters for call to function Single_WriteI2C
        MOV     R2,#0x6
        MOV     R1,#0x1a
        LCALL   ??Single_WriteI2C?relay
//  225 	Single_WriteI2C(GYRO_CONFIG,0x18);
        ; Setup parameters for call to function Single_WriteI2C
        MOV     R2,#0x18
        MOV     R1,#0x1b
        LCALL   ??Single_WriteI2C?relay
//  226 	Single_WriteI2C(ACCEL_CONFIG,0x01);
        ; Setup parameters for call to function Single_WriteI2C
        MOV     R2,#0x1
        MOV     R1,#0x1c
        LCALL   ??Single_WriteI2C?relay
//  227 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock40
//  228 
//  229 //*********************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  230 void Multiple_read_MPU6050(void)
Multiple_read_MPU6050:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function Multiple_read_MPU6050
        CODE
//  231 {   
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  232   char BUF[12]; //接收数据缓存区  
//  233   BUF[0]=Single_ReadI2C(ACCEL_XOUT_H);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x3b
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  234   BUF[1]=Single_ReadI2C(ACCEL_XOUT_L);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x3c
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     ?V0 + 4,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  235   BUF[2]=Single_ReadI2C(ACCEL_YOUT_H);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x3d
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     ?V0 + 2,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  236   BUF[3]=Single_ReadI2C(ACCEL_YOUT_L);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x3e
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     ?V0 + 3,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  237   BUF[4]=Single_ReadI2C(ACCEL_ZOUT_H);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x3f
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     ?V0 + 1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  238   BUF[5]=Single_ReadI2C(ACCEL_ZOUT_L);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x40
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     ?V0 + 10,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  239   
//  240   BUF[6]=Single_ReadI2C(GYRO_XOUT_H);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x43
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     ?V0 + 0,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  241   BUF[7]=Single_ReadI2C(GYRO_XOUT_L);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x44
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     ?V0 + 8,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  242   BUF[8]=Single_ReadI2C(GYRO_YOUT_H);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x45
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     R7,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  243   BUF[9]=Single_ReadI2C(GYRO_YOUT_L);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x46
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     ?V0 + 6,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  244   BUF[10]=Single_ReadI2C(GYRO_ZOUT_H);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x47
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     R6,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  245   BUF[11]=Single_ReadI2C(GYRO_ZOUT_L);
        ; Setup parameters for call to function Single_ReadI2C
        MOV     R1,#0x48
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     ?V0 + 12,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  246   
//  247   accX=(BUF[0]<<8)|BUF[1]; 
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 4
        MOV     DPTR,#accX
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  248   accY=(BUF[2]<<8)|BUF[3]; 
        MOV     R1,?V0 + 2
        MOV     ?V0 + 2,?V0 + 3
        MOV     A,?V0 + 2
        MOV     DPTR,#accY
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  249   accZ=(BUF[4]<<8)|BUF[5]; 
        MOV     A,?V0 + 10
        MOV     DPTR,#accZ
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  250   graX=(BUF[6]<<8)|BUF[7];
        MOV     A,?V0 + 8
        MOV     DPTR,#graX
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  251   graY=(BUF[8]<<8)|BUF[9];
        MOV     A,R7
        MOV     R1,A
        MOV     A,?V0 + 6
        MOV     DPTR,#graY
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  252   graZ=(BUF[10]<<8)|BUF[11];
        MOV     A,R6
        MOV     R1,A
        MOV     A,?V0 + 12
        MOV     DPTR,#graZ
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  253    
//  254 //  type_change(accX);
//  255 //  HalUARTWrite(0,"  ",2);
//  256 //  type_change(accY);
//  257 //  HalUARTWrite(0,"  ",2);
//  258 //  type_change(accZ);
//  259 //  HalUARTWrite(0,"  ",2);
//  260 //
//  261 //  type_change(graX);
//  262 //  HalUARTWrite(0,"  ",2);
//  263 //  type_change(graY);
//  264 //  HalUARTWrite(0,"  ",2);
//  265 //  type_change(graZ);
//  266 //  HalUARTWrite(0,"\n",1);
//  267 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        LCALL   ??Single_ReadI2C?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ALLInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ALLInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay_usec?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay_usec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteSDA_0?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteSDA_0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteSDA_1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteSDA_1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteSCL_0?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteSCL_0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteSCL_1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteSCL_1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadSDA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadSDA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Init_IO?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Init_IO

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Start?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_Stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_SendACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_SendACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_RecvACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_RecvACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_SendByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_SendByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??I2C_RecvByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    I2C_RecvByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Single_WriteI2C?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Single_WriteI2C

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Single_ReadI2C?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Single_ReadI2C

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitMPU6050?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitMPU6050

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Multiple_read_MPU6050?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Multiple_read_MPU6050

        END
//  268 
//  269 
// 
// 687 bytes in segment BANKED_CODE
// 108 bytes in segment BANK_RELAYS
//   4 bytes in segment SFR_AN
//  12 bytes in segment XDATA_Z
// 
// 795 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 4 bytes shared)
//  12 bytes of XDATA memory
//
//Errors: none
//Warnings: none
