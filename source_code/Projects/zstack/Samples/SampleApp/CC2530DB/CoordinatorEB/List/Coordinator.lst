###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         08/Apr/2019  19:57:00 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\Coordinator.c       #
#    Command line       =  -f C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee #
#                          ∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wCoord.cfg (-DCPU32MHZ                   #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee #
#                          ∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0      #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xF000                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\95612\Desktop\zigb #
#                          ee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5. #
#                          1a-MPU6050\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\Coordinator.c -D ZTOOL_P1 -D MT_TASK -D        #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=FALSE  #
#                          -lC C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbe #
#                          e∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\L #
#                          ist\ -lA C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\ #
#                          zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\List\ --diag_suppress Pe001,Pa010 -o           #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\  #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\95612\Desktop\zig #
#                          bee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5 #
#                          .1a-MPU6050\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\ -I C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\ #
#                          zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\Source\ #
#                           -I C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbe #
#                          e∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\ #
#                          TI2530DB\ -I C:\Users\95612\Desktop\zigbee∂¡»°MPU6 #
#                          050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050 #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\hal\include\ -I                #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\hal\target\CC2530EB\ -I                     #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\include\ -I C:\Users\95612\Desktop\zigb #
#                          ee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5. #
#                          1a-MPU6050\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\high_level\ -I   #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\low_level\srf04\ -I                     #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\low_level\srf04\single_chip\ -I         #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mt\ -I C:\Users\95612\Desktop\zigbee∂¡»°MPU #
#                          6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU605 #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\osal\include\ -I              #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\services\saddr\ -I                          #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\services\sdata\ -I                          #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\af\ -I C:\Users\95612\Desktop\zigbee∂ #
#                          ¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a- #
#                          MPU6050\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\stack\nwk\ -I           #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sapi\ -I C:\Users\95612\Desktop\zigbe #
#                          e∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1 #
#                          a-MPU6050\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\Components\stack\sec\ -I         #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sys\ -I C:\Users\95612\Desktop\zigbee #
#                          ∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a #
#                          -MPU6050\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\ -I          #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\zmac\ -I C:\Users\95612\Desktop\zigbee∂¡»°M #
#                          PU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6 #
#                          050\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\Components\zmac\f8w\ -Ohz              #
#                          --require_prototypes                               #
#    List file          =  C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\ #
#                          Coordinator.lst                                    #
#    Object file        =  C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\C #
#                          oordinator.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zstack\Samples\SampleApp\CC2530DB\Coordinator.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          
     76          //#include"MPU6050.h"
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          /*********************************************************************
     87           * TYPEDEFS
     88           */
     89          
     90          /*********************************************************************
     91           * GLOBAL VARIABLES
     92           */
     93          
     94          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     96          {
     97            SAMPLEAPP_PERIODIC_CLUSTERID,
     98            SAMPLEAPP_FLASH_CLUSTERID
     99          };
    100          

   \                                 In  segment XDATA_ROM_C, align 1
    101          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    102          {
    103            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    104            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    105            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    106            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    107            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    108            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    109            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    112          };
    113          
    114          // This is the Endpoint/Interface description.  It is defined here, but
    115          // filled-in in SampleApp_Init().  Another way to go would be to fill
    116          // in the structure here and make it a "const" (in code space).  The
    117          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    119          
    120          /*********************************************************************
    121           * EXTERNAL VARIABLES
    122           */
    123          
    124          /*********************************************************************
    125           * EXTERNAL FUNCTIONS
    126           */
    127          
    128          /*********************************************************************
    129           * LOCAL VARIABLES
    130           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132                                    // This variable will be received when
    133                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          afAddrType_t Point_To_Point_DstAddr;//µ„∂‘µ„Õ®–≈∂®“Â
   \                     Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    151          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    152          void SampleApp_SendPeriodicMessage( void );
    153          void SampleApp_SendPointToPointMessage( void );
    154          void SampleApp_SendFlashMessage( uint16 flashTime );
    155          
    156          void Multiple_read_MPU6050(void);
    157          void ALLInit(void);
    158          void type_change(int num);
    159          
    160          /*********************************************************************
    161           * NETWORK LAYER CALLBACKS
    162           */
    163          
    164          /*********************************************************************
    165           * PUBLIC FUNCTIONS
    166           */
    167          
    168          /*********************************************************************
    169           * @fn      SampleApp_Init
    170           *
    171           * @brief   Initialization function for the Generic App Task.
    172           *          This is called during initialization and should contain
    173           *          any application specific initialization (ie. hardware
    174           *          initialization/setup, table initialization, power up
    175           *          notificaiton ... ).
    176           *
    177           * @param   task_id - the ID assigned by OSAL.  This ID should be
    178           *                    used to send messages and set timers.
    179           *
    180           * @return  none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    183          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    184            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    185            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    186            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    187            
    188            /*****¥Æø⁄≥ı ºªØ*********/
    189            MT_UartInit ();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    190            MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    191          //  ALLInit();
    192            // Device hardware initialization can be added here or in main() (Zmain.c).
    193            // If the hardware is application specific - add it here.
    194            // If the hardware is other parts of the device add it in main().
    195          
    196           #if defined ( BUILD_ALL_DEVICES )
    197            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    198            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    199            // together - if they are - we will start up a coordinator. Otherwise,
    200            // the device will start as a router.
    201            if ( readCoordinatorJumper() )
    202              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    203            else
    204              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    205          #endif // BUILD_ALL_DEVICES
    206          
    207          #if defined ( HOLD_AUTO_START )
    208            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    209            //  from starting the device and wait for the application to
    210            //  start the device.
    211            ZDOInitDevice(0);
    212          #endif
    213          
    214            // Setup for the periodic message's destination address
    215            // Broadcast to everyone
    216            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV     A,#0xf
   \   000023   F0           MOVX    @DPTR,A
    217            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC     DPTR
   \   000025   7414         MOV     A,#0x14
   \   000027   F0           MOVX    @DPTR,A
    218            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000028   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
    219          
    220            // Setup for the flash command's destination address - Group 1
    221            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000030   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
    222            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC     DPTR
   \   000037   7414         MOV     A,#0x14
   \   000039   F0           MOVX    @DPTR,A
    223            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00003D   7401         MOV     A,#0x1
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    224            
    225            // Õ¯∑‰µ„∂‘µ„Õ®—∂∂®“Â
    226            Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//µ„≤•
   \   000043   90....       MOV     DPTR,#Point_To_Point_DstAddr + 8
   \   000046   7402         MOV     A,#0x2
   \   000048   F0           MOVX    @DPTR,A
    227            Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000049   A3           INC     DPTR
   \   00004A   7414         MOV     A,#0x14
   \   00004C   F0           MOVX    @DPTR,A
    228            Point_To_Point_DstAddr.addr.shortAddr = 0x0000; //∑¢∏¯–≠µ˜∆˜
   \   00004D   90....       MOV     DPTR,#Point_To_Point_DstAddr
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   F0           MOVX    @DPTR,A
    229          
    230            // Fill out the endpoint description.
    231            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000054   90....       MOV     DPTR,#SampleApp_epDesc
   \   000057   7414         MOV     A,#0x14
   \   000059   F0           MOVX    @DPTR,A
    232            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000061   F0           MOVX    @DPTR,A
    233            SampleApp_epDesc.simpleDesc
    234                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000062   A3           INC     DPTR
   \   000063   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000069   F0           MOVX    @DPTR,A
    235            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00006A   A3           INC     DPTR
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
    236          
    237            // Register the endpoint description with the AF
    238            afRegister( &SampleApp_epDesc );
   \   00006D                ; Setup parameters for call to function afRegister
   \   00006D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00006F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000071   12....       LCALL   ??afRegister?relay
    239          
    240            // Register for all key events - This app will handle all key events
    241            RegisterForKeys( SampleApp_TaskID );
   \   000074                ; Setup parameters for call to function RegisterForKeys
   \   000074   90....       MOV     DPTR,#SampleApp_TaskID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   ??RegisterForKeys?relay
    242          
    243            // By default, all devices start out in Group 1
    244            SampleApp_Group.ID = 0x0001;
   \   00007C   90....       MOV     DPTR,#SampleApp_Group
   \   00007F   7401         MOV     A,#0x1
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
    245            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000085                ; Setup parameters for call to function osal_memcpy
   \   000085   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000088   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00008B   F5..         MOV     ?V0 + 2,A
   \   00008D   78..         MOV     R0,#?V0 + 0
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000092   7C07         MOV     R4,#0x7
   \   000094   7D00         MOV     R5,#0x0
   \   000096   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000098   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00009A   12....       LCALL   ??osal_memcpy?relay
   \   00009D   7403         MOV     A,#0x3
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
    246            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A2                ; Setup parameters for call to function aps_AddGroup
   \   0000A2   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A4   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A6   7914         MOV     R1,#0x14
   \   0000A8   12....       LCALL   ??aps_AddGroup?relay
    247          
    248          #if defined ( LCD_SUPPORTED )
    249            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000AB                ; Setup parameters for call to function HalLcdWriteString
   \   0000AB   7901         MOV     R1,#0x1
   \   0000AD   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000AF   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B1   12....       LCALL   ??HalLcdWriteString?relay
    250          #endif
    251            
    252            osal_start_timerEx( SampleApp_TaskID,
    253                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    254                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   0000B4                ; Setup parameters for call to function osal_start_timerEx
   \   0000B4   12....       LCALL   ?Subroutine3 & 0xFFFF
    255          }
   \                     ??CrossCallReturnLabel_16:
   \   0000B7   7F03         MOV     R7,#0x3
   \   0000B9   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7CE8         MOV     R4,#-0x18
   \   000002   7D03         MOV     R5,#0x3
   \   000004                REQUIRE ??Subroutine7_0
   \   000004                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   7B00         MOV     R3,#0x0
   \   000004   90....       MOV     DPTR,#SampleApp_TaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??osal_start_timerEx?relay
   \   00000C   22           RET
    256          
    257          /*********************************************************************
    258           * @fn      SampleApp_ProcessEvent
    259           *
    260           * @brief   Generic Application Task event processor.  This function
    261           *          is called to process all events for the task.  Events
    262           *          include timers, messages and any other user defined events.
    263           *
    264           * @param   task_id  - The OSAL assigned task ID.
    265           * @param   events - events to process.  This is a bit map and can
    266           *                   contain more than one event.
    267           *
    268           * @return  none
    269           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    270          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    271          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    272            afIncomingMSGPacket_t *MSGpkt;
    273            (void)task_id;  // Intentionally unreferenced parameter
    274          
    275            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6062         JZ      ??SampleApp_ProcessEvent_0
    276            {
    277              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8014         SJMP    ??SampleApp_ProcessEvent_1
    278              while ( MSGpkt )
    279              {
    280                switch ( MSGpkt->hdr.event )
    281                {
    282                  // Received when a key is pressed
    283                  case KEY_CHANGE:
    284                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    285                    break;
    286          
    287                  // Received when a messages is received (OTA) for this endpoint
    288                  case AF_INCOMING_MSG_CMD:
    289                    SampleApp_MessageMSGCB( MSGpkt );
    290                    break;
    291          
    292                  // Received whenever the device changes state in the network
    293                  case ZDO_STATE_CHANGE:
    294                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    295                    if ( 
    296                         (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6406         XRL     A,#0x6
   \   000017   7003         JNZ     ??CrossCallReturnLabel_17
    297                    {
    298                      // Start sending the periodic message in a regular interval.
    299                      osal_start_timerEx( SampleApp_TaskID,
    300                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    301                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000019                ; Setup parameters for call to function osal_start_timerEx
   \   000019   12....       LCALL   ?Subroutine3 & 0xFFFF
    302                    }
    303                    else
    304                    {
    305                      // Device is no longer in the network
    306                    }
    307                    break;
    308          
    309                  default:
    310                    break;
    311                }
    312          
    313                // Release the memory
    314                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_17:
   \   00001C                ; Setup parameters for call to function osal_msg_deallocate
   \   00001C   AA..         MOV     R2,?V0 + 0
   \   00001E   AB..         MOV     R3,?V0 + 1
   \   000020   12....       LCALL   ??osal_msg_deallocate?relay
    315          
    316                // Next - if one is available
    317                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000023                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000023   90....       MOV     DPTR,#SampleApp_TaskID
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   12....       LCALL   ??osal_msg_receive?relay
   \   00002B   8A..         MOV     ?V0 + 0,R2
   \   00002D   8B..         MOV     ?V0 + 1,R3
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   45..         ORL     A,?V0 + 1
   \   000033   6032         JZ      ??SampleApp_ProcessEvent_3
   \   000035   85..82       MOV     DPL,?V0 + 0
   \   000038   85..83       MOV     DPH,?V0 + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   24E6         ADD     A,#-0x1a
   \   00003E   601E         JZ      ??SampleApp_ProcessEvent_4
   \   000040   245A         ADD     A,#0x5a
   \   000042   6006         JZ      ??SampleApp_ProcessEvent_5
   \   000044   24EF         ADD     A,#-0x11
   \   000046   60C7         JZ      ??SampleApp_ProcessEvent_2
   \   000048   80D2         SJMP    ??CrossCallReturnLabel_17
   \                     ??SampleApp_ProcessEvent_5:
   \   00004A                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FA           MOV     R2,A
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00005C   80BE         SJMP    ??CrossCallReturnLabel_17
   \                     ??SampleApp_ProcessEvent_4:
   \   00005E                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00005E   AA..         MOV     R2,?V0 + 0
   \   000060   AB..         MOV     R3,?V0 + 1
   \   000062   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000065   80B5         SJMP    ??CrossCallReturnLabel_17
    318              }
    319          
    320              // return unprocessed events
    321              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_3:
   \   000067   EE           MOV     A,R6
   \   000068   FA           MOV     R2,A
   \   000069   EF           MOV     A,R7
   \   00006A   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_6:
   \   00006C   FB           MOV     R3,A
   \   00006D   801E         SJMP    ??SampleApp_ProcessEvent_7
    322            }
    323          
    324            // Send a message out - This event is generated by a timer
    325            //  (setup in SampleApp_Init()).
    326            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00006F   EE           MOV     A,R6
   \   000070   A2E0         MOV     C,0xE0 /* A   */.0
   \   000072   5015         JNC     ??SampleApp_ProcessEvent_8
    327            {
    328              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    329                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000074                ; Setup parameters for call to function osal_rand
   \   000074   12....       LCALL   ??osal_rand?relay
   \   000077                ; Setup parameters for call to function osal_start_timerEx
   \   000077   EA           MOV     A,R2
   \   000078   24E8         ADD     A,#-0x18
   \   00007A   FC           MOV     R4,A
   \   00007B   E4           CLR     A
   \   00007C   3403         ADDC    A,#0x3
   \   00007E   FD           MOV     R5,A
   \   00007F   12....       LCALL   ??Subroutine7_0 & 0xFFFF
    330          
    331              // return unprocessed events
    332              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_18:
   \   000082   EE           MOV     A,R6
   \   000083   6401         XRL     A,#0x1
   \   000085   FA           MOV     R2,A
   \   000086   EF           MOV     A,R7
   \   000087   80E3         SJMP    ??SampleApp_ProcessEvent_6
    333            }
    334          
    335            // Discard unknown events
    336            return 0;
   \                     ??SampleApp_ProcessEvent_8:
   \   000089   7A00         MOV     R2,#0x0
   \   00008B   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_7:
   \   00008D   7F04         MOV     R7,#0x4
   \   00008F   02....       LJMP    ?BANKED_LEAVE_XDATA
    337          }
    338          
    339          /*********************************************************************
    340           * Event Generation Functions
    341           */
    342          /*********************************************************************
    343           * @fn      SampleApp_HandleKeys
    344           *
    345           * @brief   Handles all key events for this device.
    346           *
    347           * @param   shift - true if in shift/alt.
    348           * @param   keys - bit field for key events. Valid entries:
    349           *                 HAL_KEY_SW_2
    350           *                 HAL_KEY_SW_1
    351           *
    352           * @return  none
    353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    354          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    355          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    356            (void)shift;  // Intentionally unreferenced parameter
    357            
    358            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    359            {
    360              /* This key sends the Flash Command is sent to Group 1.
    361               * This device will not receive the Flash Command from this
    362               * device (even if it belongs to group 1).
    363               */
    364              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    365            }
    366          
    367            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    368            {
    369              /* The Flashr Command is sent to Group 1.
    370               * This key toggles this device in and out of group 1.
    371               * If this device doesn't belong to group 1, this application
    372               * will not receive the Flash command sent to group 1.
    373               */
    374              aps_Group_t *grp;
    375              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    376              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    377              {
    378                // Remove from the group
    379                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    380              }
    381              else
    382              {
    383                // Add to the flash group
    384                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    385              }
    386            }
    387          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    388          
    389          /*********************************************************************
    390           * LOCAL FUNCTIONS
    391           */
    392          /*********************************************************************
    393           * @fn      SampleApp_MessageMSGCB
    394           *
    395           * @brief   Data message processor callback.  This function processes
    396           *          any incoming data - probably from other devices.  So, based
    397           *          on cluster ID, perform the intended action.
    398           *
    399           * @param   none
    400           *
    401           * @return  none
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    404          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    405          
    406            uint16 flashTime;
    407            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000019   0200         DW        2
   \   00001B   01           DB        1
   \   00001C   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00001E   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_2
    408            {
    409              case SAMPLEAPP_PERIODIC_CLUSTERID:
    410                break;
    411                
    412              case SAMPLEAPP_POINT_TO_POINT_CLUSTERID:
    413                if(pkt->cmd.Data[36]=='A')
   \                     ??SampleApp_MessageMSGCB_2:
   \   000022   EA           MOV     A,R2
   \   000023   2422         ADD     A,#0x22
   \   000025   F582         MOV     DPL,A
   \   000027   EB           MOV     A,R3
   \   000028   3400         ADDC    A,#0x0
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   2424         ADD     A,#0x24
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   3400         ADDC    A,#0x0
   \   000034   F9           MOV     R1,A
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6441         XRL     A,#0x41
   \   00003C   7025         JNZ     ??SampleApp_MessageMSGCB_3
    414               {
    415                 
    416                  HalUARTWrite(0,&pkt->cmd.Data[0],6);
   \   00003E   12....       LCALL   ?Subroutine2 & 0xFFFF
    417                  HalUARTWrite(0,"  ",2);
    418                  HalUARTWrite(0,&pkt->cmd.Data[6],6);
    419                  HalUARTWrite(0,"  ",2);
    420                  HalUARTWrite(0,&pkt->cmd.Data[12],6);
    421                  HalUARTWrite(0,"  ",2);
    422                  HalUARTWrite(0,&pkt->cmd.Data[18],6);
    423                  HalUARTWrite(0,"  ",2);
    424                  HalUARTWrite(0,&pkt->cmd.Data[24],6);
    425                  HalUARTWrite(0,"  ",2);
    426                  HalUARTWrite(0,&pkt->cmd.Data[30],6);
    427                  HalUARTWrite(0," 1",2);
   \                     ??CrossCallReturnLabel_4:
   \   000041   7A..         MOV     R2,#`?<Constant " 1">` & 0xff
   \   000043   7B..         MOV     R3,#(`?<Constant " 1">` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_4:
   \   000045   7900         MOV     R1,#0x0
   \   000047   12....       LCALL   ??HalUARTWrite?relay
    428                  HalUARTWrite(0,"\n",1);
   \   00004A                ; Setup parameters for call to function HalUARTWrite
   \   00004A   7C01         MOV     R4,#0x1
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000050   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000052   7900         MOV     R1,#0x0
   \   000054   12....       LCALL   ??HalUARTWrite?relay
    429                  HalLedBlink( HAL_LED_1, 4, 50, 200 );
   \   000057                ; Setup parameters for call to function HalLedBlink
   \   000057   7CC8         MOV     R4,#-0x38
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7B32         MOV     R3,#0x32
   \   00005D   7A04         MOV     R2,#0x4
   \   00005F   7901         MOV     R1,#0x1
   \   000061   8070         SJMP    ??SampleApp_MessageMSGCB_5
    430                }
    431                 else if(pkt->cmd.Data[36]=='B')
   \                     ??SampleApp_MessageMSGCB_3:
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6442         XRL     A,#0x42
   \   000066   7009         JNZ     ??SampleApp_MessageMSGCB_6
    432                {
    433                  HalUARTWrite(0,&pkt->cmd.Data[0],6);
   \   000068   12....       LCALL   ?Subroutine2 & 0xFFFF
    434                  HalUARTWrite(0,"  ",2);
    435                  HalUARTWrite(0,&pkt->cmd.Data[6],6);
    436                  HalUARTWrite(0,"  ",2);
    437                  HalUARTWrite(0,&pkt->cmd.Data[12],6);
    438                  HalUARTWrite(0,"  ",2);
    439                  HalUARTWrite(0,&pkt->cmd.Data[18],6);
    440                  HalUARTWrite(0,"  ",2);
    441                  HalUARTWrite(0,&pkt->cmd.Data[24],6);
    442                  HalUARTWrite(0,"  ",2);
    443                  HalUARTWrite(0,&pkt->cmd.Data[30],6);
    444                  HalUARTWrite(0," 2",2);
    445                  HalUARTWrite(0,"\n",1);
    446                  HalLedBlink( HAL_LED_1, 4, 50, 200 );
    447                }
   \                     ??CrossCallReturnLabel_5:
   \   00006B   7A..         MOV     R2,#`?<Constant " 2">` & 0xff
   \   00006D   7B..         MOV     R3,#(`?<Constant " 2">` >> 8) & 0xff
   \   00006F   80D4         SJMP    ??SampleApp_MessageMSGCB_4
    448               else if(pkt->cmd.Data[36]=='C')
   \                     ??SampleApp_MessageMSGCB_6:
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6443         XRL     A,#0x43
   \   000074   7009         JNZ     ??SampleApp_MessageMSGCB_7
    449                {
    450                  HalUARTWrite(0,&pkt->cmd.Data[0],6);
   \   000076   12....       LCALL   ?Subroutine2 & 0xFFFF
    451                  HalUARTWrite(0,"  ",2);
    452                  HalUARTWrite(0,&pkt->cmd.Data[6],6);
    453                  HalUARTWrite(0,"  ",2);
    454                  HalUARTWrite(0,&pkt->cmd.Data[12],6);
    455                  HalUARTWrite(0,"  ",2);
    456                  HalUARTWrite(0,&pkt->cmd.Data[18],6);
    457                  HalUARTWrite(0,"  ",2);
    458                  HalUARTWrite(0,&pkt->cmd.Data[24],6);
    459                  HalUARTWrite(0,"  ",2);
    460                  HalUARTWrite(0,&pkt->cmd.Data[30],6);
    461                  HalUARTWrite(0," 3",2);
    462                  HalUARTWrite(0,"\n",1);
    463                  HalLedBlink( HAL_LED_1, 4, 50, 200 );
    464                }
   \                     ??CrossCallReturnLabel_6:
   \   000079   7A..         MOV     R2,#`?<Constant " 3">` & 0xff
   \   00007B   7B..         MOV     R3,#(`?<Constant " 3">` >> 8) & 0xff
   \   00007D   80C6         SJMP    ??SampleApp_MessageMSGCB_4
    465                else if(pkt->cmd.Data[36]=='D')
   \                     ??SampleApp_MessageMSGCB_7:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   6444         XRL     A,#0x44
   \   000082   7009         JNZ     ??SampleApp_MessageMSGCB_8
    466                {
    467                  HalUARTWrite(0,&pkt->cmd.Data[0],6);
   \   000084   12....       LCALL   ?Subroutine2 & 0xFFFF
    468                  HalUARTWrite(0,"  ",2);
    469                  HalUARTWrite(0,&pkt->cmd.Data[6],6);
    470                  HalUARTWrite(0,"  ",2);
    471                  HalUARTWrite(0,&pkt->cmd.Data[12],6);
    472                  HalUARTWrite(0,"  ",2);
    473                  HalUARTWrite(0,&pkt->cmd.Data[18],6);
    474                  HalUARTWrite(0,"  ",2);
    475                  HalUARTWrite(0,&pkt->cmd.Data[24],6);
    476                  HalUARTWrite(0,"  ",2);
    477                  HalUARTWrite(0,&pkt->cmd.Data[30],6);
    478                  HalUARTWrite(0," 4",2);
    479                  HalUARTWrite(0,"\n",1);
    480                  HalLedBlink( HAL_LED_1, 4, 50, 200 );
    481                }
   \                     ??CrossCallReturnLabel_7:
   \   000087   7A..         MOV     R2,#`?<Constant " 4">` & 0xff
   \   000089   7B..         MOV     R3,#(`?<Constant " 4">` >> 8) & 0xff
   \   00008B   80B8         SJMP    ??SampleApp_MessageMSGCB_4
    482            
    483                
    484                else
    485                  HalLedBlink( HAL_LED_2, 4, 50, 100 );
   \                     ??SampleApp_MessageMSGCB_8:
   \   00008D                ; Setup parameters for call to function HalLedBlink
   \   00008D   7C64         MOV     R4,#0x64
   \   00008F   7D00         MOV     R5,#0x0
   \   000091   7B32         MOV     R3,#0x32
   \   000093   7A04         MOV     R2,#0x4
   \   000095   7902         MOV     R1,#0x2
   \   000097   803A         SJMP    ??SampleApp_MessageMSGCB_5
    486                break;
    487          
    488              case SAMPLEAPP_FLASH_CLUSTERID:
    489                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    490                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   000099   EA           MOV     A,R2
   \   00009A   2422         ADD     A,#0x22
   \   00009C   FE           MOV     R6,A
   \   00009D   EB           MOV     A,R3
   \   00009E   3400         ADDC    A,#0x0
   \   0000A0   FF           MOV     R7,A
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F8           MOV     R0,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F9           MOV     R1,A
   \   0000AA                ; Setup parameters for call to function HalLedBlink
   \   0000AA   8882         MOV     DPL,R0
   \   0000AC   8983         MOV     DPH,R1
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   FA           MOV     R2,A
   \   0000B1   8882         MOV     DPL,R0
   \   0000B3   8983         MOV     DPH,R1
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F9           MOV     R1,A
   \   0000B9   EA           MOV     A,R2
   \   0000BA   2400         ADD     A,#0x0
   \   0000BC   F5..         MOV     ?V0 + 0,A
   \   0000BE   E4           CLR     A
   \   0000BF   39           ADDC    A,R1
   \   0000C0   F5..         MOV     ?V0 + 1,A
   \   0000C2   7402         MOV     A,#0x2
   \   0000C4   78..         MOV     R0,#?V0 + 0
   \   0000C6   12....       LCALL   ?US_SHR
   \   0000C9   AC..         MOV     R4,?V0 + 0
   \   0000CB   AD..         MOV     R5,?V0 + 1
   \   0000CD   7B32         MOV     R3,#0x32
   \   0000CF   7A04         MOV     R2,#0x4
   \   0000D1   7908         MOV     R1,#0x8
   \                     ??SampleApp_MessageMSGCB_5:
   \   0000D3   12....       LCALL   ??HalLedBlink?relay
    491                break;
    492            }
    493          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000D6   02....       LJMP    ??Subroutine8_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   FE           MOV     R6,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function HalUARTWrite
   \   000008                ; Setup parameters for call to function HalUARTWrite
   \   000008                ; Setup parameters for call to function HalUARTWrite
   \   000008                ; Setup parameters for call to function HalUARTWrite
   \   000008   7C06         MOV     R4,#0x6
   \   00000A   7D00         MOV     R5,#0x0
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FB           MOV     R3,A
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??HalUARTWrite?relay
   \   00001A   75....       MOV     ?V0 + 0,#`?<Constant "  ">` & 0xff
   \   00001D   75....       MOV     ?V0 + 1,#(`?<Constant "  ">` >> 8) & 0xff
   \   000020                ; Setup parameters for call to function HalUARTWrite
   \   000020                ; Setup parameters for call to function HalUARTWrite
   \   000020                ; Setup parameters for call to function HalUARTWrite
   \   000020                ; Setup parameters for call to function HalUARTWrite
   \   000020   7C02         MOV     R4,#0x2
   \   000022   7D00         MOV     R5,#0x0
   \   000024   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000027   2406         ADD     A,#0x6
   \   000029   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00002C   240C         ADD     A,#0xc
   \   00002E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000031   2412         ADD     A,#0x12
   \   000033   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000036   2418         ADD     A,#0x18
   \   000038   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00003B   241E         ADD     A,#0x1e
   \   00003D   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000040   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   7900         MOV     R1,#0x0
   \   000008   12....       LCALL   ??HalUARTWrite?relay
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B   7C02         MOV     R4,#0x2
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   ??HalUARTWrite?relay
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009   7C06         MOV     R4,#0x6
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET
    494          
    495          /*********************************************************************
    496           * @fn      SampleApp_SendPeriodicMessage
    497           *
    498           * @brief   Send the periodic message.
    499           *
    500           * @param   none
    501           *
    502           * @return  none
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine8_0
   \   000003                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    505          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    506            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    507                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    508                                 1,
    509                                 (uint8*)&SampleAppPeriodicCounter,
    510                                 &SampleApp_TransID,
    511                                 AF_DISCV_ROUTE,
    512                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine0 & 0xFFFF
    513            {
    514            }
    515            else
    516            {
    517              // Error occurred in request to send.
    518            }
    519          }
    520          
    521          /*********************************************************************
    522           * @fn      SampleApp_SendFlashMessage
    523           *
    524           * @brief   Send the flash message to group 1.
    525           *
    526           * @param   flashTime - in milliseconds
    527           *
    528           * @return  none
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    531          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    532            uint8 buffer[3];
    533            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    534            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    535            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    536          
    537            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    538                                 SAMPLEAPP_FLASH_CLUSTERID,
    539                                 3,
    540                                 buffer,
    541                                 &SampleApp_TransID,
    542                                 AF_DISCV_ROUTE,
    543                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    544            {
    545            }
    546            else
    547            {
    548              // Error occurred in request to send.
    549            }
    550          }
   \   000071   7403         MOV     A,#0x3
   \   000073   02....       LJMP    ?Subroutine0 & 0xFFFF
    551          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          void type_change(int num)
   \                     type_change:
    553          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    554            uint8 temp[5];
    555            if(num<0)
   \   00000E   C3           CLR     C
   \   00000F   9400         SUBB    A,#0x0
   \   000011   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000013   65D0         XRL     A,PSW
   \   000015   33           RLC     A
   \   000016   7C01         MOV     R4,#0x1
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   5016         JNC     ??type_change_0
    556            {
    557              HalUARTWrite(0,"-",1);
   \   00001C                ; Setup parameters for call to function HalUARTWrite
   \   00001C   7A..         MOV     R2,#`?<Constant "-">` & 0xff
   \   00001E   7B..         MOV     R3,#(`?<Constant "-">` >> 8) & 0xff
   \   000020   7900         MOV     R1,#0x0
   \   000022   12....       LCALL   ??HalUARTWrite?relay
    558              num = -num;
   \   000025   C3           CLR     C
   \   000026   E4           CLR     A
   \   000027   9E           SUBB    A,R6
   \   000028   F8           MOV     R0,A
   \   000029   E4           CLR     A
   \   00002A   9F           SUBB    A,R7
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   FE           MOV     R6,A
   \   00002E   E9           MOV     A,R1
   \   00002F   FF           MOV     R7,A
   \   000030   8009         SJMP    ??type_change_1
    559            }
    560            else
    561            {
    562              HalUARTWrite(0,"+",1);
   \                     ??type_change_0:
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   7A..         MOV     R2,#`?<Constant "+">` & 0xff
   \   000034   7B..         MOV     R3,#(`?<Constant "+">` >> 8) & 0xff
   \   000036   7900         MOV     R1,#0x0
   \   000038   12....       LCALL   ??HalUARTWrite?relay
    563            }
    564            temp[0] = num/10000+0x30;
   \                     ??type_change_1:
   \   00003B   EE           MOV     A,R6
   \   00003C   F8           MOV     R0,A
   \   00003D   EF           MOV     A,R7
   \   00003E   F9           MOV     R1,A
   \   00003F   7A10         MOV     R2,#0x10
   \   000041   7B27         MOV     R3,#0x27
   \   000043   12....       LCALL   ?S_DIV_MOD
   \   000046   E8           MOV     A,R0
   \   000047   2430         ADD     A,#0x30
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   12....       LCALL   ?Subroutine1 & 0xFFFF
    565            temp[1] = num%10000/1000+0x30;
   \                     ??CrossCallReturnLabel_0:
   \   000052   7A10         MOV     R2,#0x10
   \   000054   7B27         MOV     R3,#0x27
   \   000056   12....       LCALL   ?S_DIV_MOD
   \   000059   EA           MOV     A,R2
   \   00005A   F8           MOV     R0,A
   \   00005B   EB           MOV     A,R3
   \   00005C   F9           MOV     R1,A
   \   00005D   7AE8         MOV     R2,#-0x18
   \   00005F   7B03         MOV     R3,#0x3
   \   000061   12....       LCALL   ?S_DIV_MOD
   \   000064   E8           MOV     A,R0
   \   000065   2430         ADD     A,#0x30
   \   000067   C0E0         PUSH    A
   \   000069   7401         MOV     A,#0x1
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   D0E0         POP     A
   \   000070   12....       LCALL   ?Subroutine1 & 0xFFFF
    566            temp[2] = num%1000/100+0x30;
   \                     ??CrossCallReturnLabel_1:
   \   000073   7AE8         MOV     R2,#-0x18
   \   000075   7B03         MOV     R3,#0x3
   \   000077   12....       LCALL   ?S_DIV_MOD
   \   00007A   EA           MOV     A,R2
   \   00007B   F8           MOV     R0,A
   \   00007C   EB           MOV     A,R3
   \   00007D   F9           MOV     R1,A
   \   00007E   7A64         MOV     R2,#0x64
   \   000080   7B00         MOV     R3,#0x0
   \   000082   12....       LCALL   ?S_DIV_MOD
   \   000085   E8           MOV     A,R0
   \   000086   2430         ADD     A,#0x30
   \   000088   C0E0         PUSH    A
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   D0E0         POP     A
   \   000091   12....       LCALL   ?Subroutine1 & 0xFFFF
    567            temp[3] = num%100/10+0x30;
   \                     ??CrossCallReturnLabel_2:
   \   000094   7A64         MOV     R2,#0x64
   \   000096   7B00         MOV     R3,#0x0
   \   000098   12....       LCALL   ?S_DIV_MOD
   \   00009B   EA           MOV     A,R2
   \   00009C   F8           MOV     R0,A
   \   00009D   EB           MOV     A,R3
   \   00009E   F9           MOV     R1,A
   \   00009F   7A0A         MOV     R2,#0xa
   \   0000A1   7B00         MOV     R3,#0x0
   \   0000A3   12....       LCALL   ?S_DIV_MOD
   \   0000A6   E8           MOV     A,R0
   \   0000A7   2430         ADD     A,#0x30
   \   0000A9   C0E0         PUSH    A
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   D0E0         POP     A
   \   0000B2   12....       LCALL   ?Subroutine1 & 0xFFFF
    568            temp[4] = num%10+0x30;
   \                     ??CrossCallReturnLabel_3:
   \   0000B5   7A0A         MOV     R2,#0xa
   \   0000B7   7B00         MOV     R3,#0x0
   \   0000B9   12....       LCALL   ?S_DIV_MOD
   \   0000BC   EA           MOV     A,R2
   \   0000BD   2430         ADD     A,#0x30
   \   0000BF   C0E0         PUSH    A
   \   0000C1   7404         MOV     A,#0x4
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   D0E0         POP     A
   \   0000C8   F0           MOVX    @DPTR,A
    569            HalUARTWrite(0,&temp[0],5);
   \   0000C9                ; Setup parameters for call to function HalUARTWrite
   \   0000C9   7C05         MOV     R4,#0x5
   \   0000CB   7D00         MOV     R5,#0x0
   \   0000CD   85..82       MOV     DPL,?XSP + 0
   \   0000D0   85..83       MOV     DPH,?XSP + 1
   \   0000D3   AA82         MOV     R2,DPL
   \   0000D5   AB83         MOV     R3,DPH
   \   0000D7   7900         MOV     R1,#0x0
   \   0000D9   12....       LCALL   ??HalUARTWrite?relay
    570          }
   \   0000DC   7405         MOV     A,#0x5
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E1   7F01         MOV     R7,#0x1
   \   0000E3   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   F8           MOV     R0,A
   \   000003   EF           MOV     A,R7
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??type_change?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    type_change

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  ">`:
   \   000000   202000       DB "  "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " 1">`:
   \   000000   203100       DB " 1"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " 2">`:
   \   000000   203200       DB " 2"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " 3">`:
   \   000000   203300       DB " 3"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " 4">`:
   \   000000   203400       DB " 4"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "-">`:
   \   000000   2D00         DB "-"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+">`:
   \   000000   2B00         DB "+"

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
       -> osal_start_timerEx            0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
       -> HalLedBlink                   0      0     20
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     type_change                        1      0     14
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     Point_To_Point_DstAddr                  12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         188
     ?Subroutine3                             4
     ??Subroutine7_0                         13
     SampleApp_ProcessEvent                 146
     SampleApp_HandleKeys                    61
     ??Subroutine8_0                          5
     SampleApp_MessageMSGCB                 217
     ?Subroutine2                            65
     ?Subroutine5                            16
     ?Subroutine4                             7
     ?Subroutine6                            19
     ?Subroutine0                             3
     SampleApp_SendPeriodicMessage           69
     SampleApp_SendFlashMessage             118
     type_change                            230
     ?Subroutine1                             6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??type_change?relay                      6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "  ">                         3
     ?<Constant " 1">                         3
     ?<Constant "\n">                         2
     ?<Constant " 2">                         3
     ?<Constant " 3">                         3
     ?<Constant " 4">                         3
     ?<Constant "-">                          2
     ?<Constant "+">                          2

 
 1 167 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    55 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 209 bytes of CODE  memory
    55 bytes of CONST memory
    65 bytes of XDATA memory

Errors: none
Warnings: none
