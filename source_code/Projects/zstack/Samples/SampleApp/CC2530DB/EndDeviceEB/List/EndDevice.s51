///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        07/Apr/2019  18:55:35 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\EndDevice.c      /
//    Command line       =  -f C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbe /
//                          e∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wEndev.cfg (-DCPU32MHZ               /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0     /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xF000                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\95612\Desktop\zig /
//                          bee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2. /
//                          5.1a-MPU6050\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\EndDevice.c -D NWK_AUTO_POLL -D ZTOOL_P1   /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\EndDeviceEB\List /
//                          \ -lA C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zi /
//                          gbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\EndDeviceE /
//                          B\List\ --diag_suppress Pe001,Pa010 -o            /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\ /
//                           -e --no_code_motion --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\ -I              /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\Source\ -I    /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\T /
//                          I2530DB\ -I C:\Users\95612\Desktop\zigbee∂¡»°MPU6 /
//                          050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU605 /
//                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\hal\include\ -I             /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\hal\target\CC2530EB\ -I                 /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mac\include\ -I                         /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mac\high_level\ -I                      /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mac\low_level\srf04\ -I                 /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mac\low_level\srf04\single_chip\ -I     /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\mt\ -I C:\Users\95612\Desktop\zigbee∂¡» /
//                          °MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-M /
//                          PU6050\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\Components\osal\include\ -I       /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\services\saddr\ -I                      /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\services\sdata\ -I                      /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\af\ -I C:\Users\95612\Desktop\zig /
//                          bee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2. /
//                          5.1a-MPU6050\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\stack\nwk\ -I    /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\sapi\ -I                          /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\sec\ -I                           /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\sys\ -I                           /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\zdo\ -I                           /
//                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\zmac\ -I C:\Users\95612\Desktop\zigbee∂ /
//                          ¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a /
//                          -MPU6050\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz       /
//                          --require_prototypes                              /
//    List file          =  C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡ /
//                          »°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\EndDeviceEB\List /
//                          \EndDevice.s51                                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME EndDevice

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC ??SampleApp_SendPointToPointMessage?relay
        FUNCTION ??SampleApp_SendPointToPointMessage?relay,0203H
        PUBLIC ??type_change?relay
        FUNCTION ??type_change?relay,0203H
        PUBLIC Point_To_Point_DstAddr
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SendPointToPointMessage
        FUNCTION SampleApp_SendPointToPointMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 56, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_IEN0
        PUBLIC temp
        PUBLIC type_change
        FUNCTION type_change,0203H
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
ALLInit             SYMBOL "ALLInit"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
Onboard_wait        SYMBOL "Onboard_wait"
Multiple_read_MPU6050 SYMBOL "Multiple_read_MPU6050"
osal_rand           SYMBOL "osal_rand"
aps_FindGroup       SYMBOL "aps_FindGroup"
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
HalLedBlink         SYMBOL "HalLedBlink"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??ALLInit?relay     SYMBOL "?relay", ALLInit
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??Multiple_read_MPU6050?relay SYMBOL "?relay", Multiple_read_MPU6050
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??aps_FindGroup?relay SYMBOL "?relay", aps_FindGroup
??aps_RemoveGroup?relay SYMBOL "?relay", aps_RemoveGroup
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage
SampleApp_SendPointToPointMessage SYMBOL "SampleApp_SendPointToPointMessage"
??SampleApp_SendPointToPointMessage?relay SYMBOL "?relay", SampleApp_SendPointToPointMessage
type_change         SYMBOL "type_change"
??type_change?relay SYMBOL "?relay", type_change

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ALLInit
        FUNCTION ALLInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Multiple_read_MPU6050
        FUNCTION Multiple_read_MPU6050,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??ALLInit?relay
        FUNCTION ??ALLInit?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??Multiple_read_MPU6050?relay
        FUNCTION ??Multiple_read_MPU6050?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??aps_FindGroup?relay
        FUNCTION ??aps_FindGroup?relay,00H
        EXTERN ??aps_RemoveGroup?relay
        FUNCTION ??aps_RemoveGroup?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN accX
        EXTERN accY
        EXTERN accZ
        EXTERN graX
        EXTERN graY
        EXTERN graZ

// C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zstack\Samples\SampleApp\CC2530DB\EndDevice.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 #include "SampleApp.h"
//   65 #include "SampleAppHw.h"
//   66 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   67 
//   68 /* HAL */
//   69 #include "hal_lcd.h"
//   70 #include "hal_led.h"
//   71 #include "hal_key.h"
//   72 #include "MT_UART.h"
//   73 #include"MPU6050.h"
//   74 
//   75 /*********************************************************************
//   76  * MACROS
//   77  */
//   78 
//   79 /*********************************************************************
//   80  * CONSTANTS
//   81  */
//   82 
//   83 /*********************************************************************
//   84  * TYPEDEFS
//   85  */
//   86 
//   87 /*********************************************************************
//   88  * GLOBAL VARIABLES
//   89  */
//   90 
//   91 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   92 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   93 {
//   94   SAMPLEAPP_PERIODIC_CLUSTERID,
//   95   SAMPLEAPP_FLASH_CLUSTERID
//   96 };
//   97 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   98 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//   99 {
//  100   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  101   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  102   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  103   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  104   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  105   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  106   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  107   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  108   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  109 };
//  110 // This is the Endpoint/Interface description.  It is defined here, but
//  111 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  112 // in the structure here and make it a "const" (in code space).  The
//  113 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  114 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  115 
//  116 /*********************************************************************
//  117  * EXTERNAL VARIABLES
//  118  */
//  119 
//  120 /*********************************************************************
//  121  * EXTERNAL FUNCTIONS
//  122  */
//  123 
//  124 /*********************************************************************
//  125  * LOCAL VARIABLES
//  126  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  127 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  128                           // This variable will be received when
//  129                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  130 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  131 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  133 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 afAddrType_t SampleApp_Flash_DstAddr;
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 afAddrType_t Point_To_Point_DstAddr;//µ„∂‘µ„Õ®–≈∂®“Â
Point_To_Point_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  137 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  139 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 
//  143 /*********************************************************************
//  144  * LOCAL FUNCTIONS
//  145  */
//  146 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  147 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  148 void SampleApp_SendPeriodicMessage( void );
//  149 void SampleApp_SendPointToPointMessage( void );
//  150 void SampleApp_SendFlashMessage( uint16 flashTime );
//  151 void Multiple_read_MPU6050(void);
//  152 void ALLInit(void);
//  153 void type_change(int num);

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 uint8 temp[6];
temp:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  155 
//  156 /*********************************************************************
//  157  * NETWORK LAYER CALLBACKS
//  158  */
//  159 
//  160 /*********************************************************************
//  161  * PUBLIC FUNCTIONS
//  162  */
//  163 
//  164 /*********************************************************************
//  165  * @fn      SampleApp_Init
//  166  *
//  167  * @brief   Initialization function for the Generic App Task.
//  168  *          This is called during initialization and should contain
//  169  *          any application specific initialization (ie. hardware
//  170  *          initialization/setup, table initialization, power up
//  171  *          notificaiton ... ).
//  172  *
//  173  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  174  *                    used to send messages and set timers.
//  175  *
//  176  * @return  none
//  177  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  178 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  179 {
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, ALLInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  180   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  181   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  182   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  183   
//  184   /*****¥Æø⁄≥ı ºªØ*********/
//  185   MT_UartInit ();
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  186   MT_UartRegisterTaskID(task_id);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  187   ALLInit();
        ; Setup parameters for call to function ALLInit
        LCALL   ??ALLInit?relay
//  188   // Device hardware initialization can be added here or in main() (Zmain.c).
//  189   // If the hardware is application specific - add it here.
//  190   // If the hardware is other parts of the device add it in main().
//  191 
//  192  #if defined ( BUILD_ALL_DEVICES )
//  193   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  194   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  195   // together - if they are - we will start up a coordinator. Otherwise,
//  196   // the device will start as a router.
//  197   if ( readCoordinatorJumper() )
//  198     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  199   else
//  200     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  201 #endif // BUILD_ALL_DEVICES
//  202 
//  203 #if defined ( HOLD_AUTO_START )
//  204   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  205   //  from starting the device and wait for the application to
//  206   //  start the device.
//  207   ZDOInitDevice(0);
//  208 #endif
//  209 
//  210   // Setup for the periodic message's destination address
//  211   // Broadcast to everyone
//  212   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  213   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  214   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  215 
//  216   // Setup for the flash command's destination address - Group 1
//  217   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  218   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  219   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  220   
//  221   // µ„∂‘µ„Õ®—∂∂®“Â
//  222   Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//µ„≤•
        MOV     DPTR,#Point_To_Point_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  223   Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  224   Point_To_Point_DstAddr.addr.shortAddr = 0x0000; //∑¢∏¯–≠µ˜∆˜
        MOV     DPTR,#Point_To_Point_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  225 
//  226   // Fill out the endpoint description.
//  227   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  228   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  229   SampleApp_epDesc.simpleDesc
//  230             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  231   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  232 
//  233   // Register the endpoint description with the AF
//  234   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  235 
//  236   // Register for all key events - This app will handle all key events
//  237   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  238 
//  239   // By default, all devices start out in Group 1
//  240   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  241   osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  242   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  243 
//  244 #if defined ( LCD_SUPPORTED )
//  245   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  246 #endif
//  247   
//  248   osal_start_timerEx( SampleApp_TaskID,
//  249                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  250                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine9 & 0xFFFF
//  251 }
??CrossCallReturnLabel_41:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     R4,#-0x18
        MOV     R5,#0x3
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  252 
//  253 /*********************************************************************
//  254  * @fn      SampleApp_ProcessEvent
//  255  *
//  256  * @brief   Generic Application Task event processor.  This function
//  257  *          is called to process all events for the task.  Events
//  258  *          include timers, messages and any other user defined events.
//  259  *
//  260  * @param   task_id  - The OSAL assigned task ID.
//  261  * @param   events - events to process.  This is a bit map and can
//  262  *                   contain more than one event.
//  263  *
//  264  * @return  none
//  265  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  266 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  267 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, Multiple_read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPointToPointMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  268   afIncomingMSGPacket_t *MSGpkt;
//  269   (void)task_id;  // Intentionally unreferenced parameter
//  270 
//  271   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  272   {
//  273     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  274     while ( MSGpkt )
//  275     {
//  276       switch ( MSGpkt->hdr.event )
//  277       {
//  278         // Received when a key is pressed
//  279         case KEY_CHANGE:
//  280           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  281           break;
//  282 
//  283         // Received when a messages is received (OTA) for this endpoint
//  284         case AF_INCOMING_MSG_CMD:
//  285           SampleApp_MessageMSGCB( MSGpkt );
//  286           break;
//  287 
//  288         // Received whenever the device changes state in the network
//  289         case ZDO_STATE_CHANGE:
//  290           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  291           if ( 
//  292                (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x6
        JNZ     ??CrossCallReturnLabel_42
//  293           {
//  294             // Start sending the periodic message in a regular interval.
//  295             osal_start_timerEx( SampleApp_TaskID,
//  296                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  297                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine9 & 0xFFFF
//  298           }
//  299           else
//  300           {
//  301             // Device is no longer in the network
//  302           }
//  303           break;
//  304 
//  305         default:
//  306           break;
//  307       }
//  308 
//  309       // Release the memory
//  310       osal_msg_deallocate( (uint8 *)MSGpkt );
??CrossCallReturnLabel_42:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  311 
//  312       // Next - if one is available
//  313       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_4
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_5
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??CrossCallReturnLabel_42
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        SJMP    ??CrossCallReturnLabel_42
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??CrossCallReturnLabel_42
//  314     }
//  315 
//  316     // return unprocessed events
//  317     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_3:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_6:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_7
//  318   }
//  319 
//  320   // Send a message out - This event is generated by a timer
//  321   //  (setup in SampleApp_Init()).
//  322   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_8
//  323   {
//  324     // Send the periodic message
//  325     //SampleApp_SendPeriodicMessage();   
//  326     EA=0;     //≥ı ºªØMPU6050
        CLR     0xa8.7
//  327     MicroWait(2000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x30
        MOV     R3,#0x7
        LCALL   ??Onboard_wait?relay
//  328     Multiple_read_MPU6050();
        ; Setup parameters for call to function Multiple_read_MPU6050
        LCALL   ??Multiple_read_MPU6050?relay
//  329     EA=1;
        SETB    0xa8.7
//  330     SampleApp_SendPointToPointMessage();   
        ; Setup parameters for call to function SampleApp_SendPointToPointMessage
        LCALL   ??SampleApp_SendPointToPointMessage?relay
//  331     
//  332     // Setup to send message again in normal period (+ a little jitter)
//  333     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  334         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        LCALL   ??Subroutine10_0 & 0xFFFF
//  335     // return unprocessed events
//  336     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
??CrossCallReturnLabel_43:
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_6
//  337   }
//  338   // Discard unknown events
//  339   return 0;
??SampleApp_ProcessEvent_8:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_7:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
        REQUIRE _A_IEN0
//  340 }
//  341 
//  342 /*********************************************************************
//  343  * Event Generation Functions
//  344  */
//  345 /*********************************************************************
//  346  * @fn      SampleApp_HandleKeys
//  347  *
//  348  * @brief   Handles all key events for this device.
//  349  *
//  350  * @param   shift - true if in shift/alt.
//  351  * @param   keys - bit field for key events. Valid entries:
//  352  *                 HAL_KEY_SW_2
//  353  *                 HAL_KEY_SW_1
//  354  *
//  355  * @return  none
//  356  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  357 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  358 {
        FUNCALL SampleApp_HandleKeys, SampleApp_SendFlashMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  359   (void)shift;  // Intentionally unreferenced parameter
//  360   
//  361   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_HandleKeys_0
//  362   {
//  363     /* This key sends the Flash Command is sent to Group 1.
//  364      * This device will not receive the Flash Command from this
//  365      * device (even if it belongs to group 1).
//  366      */
//  367     SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
        ; Setup parameters for call to function SampleApp_SendFlashMessage
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??SampleApp_SendFlashMessage?relay
//  368   }
//  369 
//  370   if ( keys & HAL_KEY_SW_2 )
??SampleApp_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??SampleApp_HandleKeys_1
//  371   {
//  372     /* The Flashr Command is sent to Group 1.
//  373      * This key toggles this device in and out of group 1.
//  374      * If this device doesn't belong to group 1, this application
//  375      * will not receive the Flash command sent to group 1.
//  376      */
//  377     aps_Group_t *grp;
//  378     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  379     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_FindGroup?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_HandleKeys_2
//  380     {
//  381       // Remove from the group
//  382       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_RemoveGroup?relay
        SJMP    ??SampleApp_HandleKeys_1
//  383     }
//  384     else
//  385     {
//  386       // Add to the flash group
//  387       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_2:
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  388     }
//  389   }
//  390 }
??SampleApp_HandleKeys_1:
        LJMP    ??Subroutine11_0 & 0xFFFF
        CFI EndBlock cfiBlock9
//  391 
//  392 /*********************************************************************
//  393  * LOCAL FUNCTIONS
//  394  */
//  395 
//  396 /*********************************************************************
//  397  * @fn      SampleApp_MessageMSGCB
//  398  *
//  399  * @brief   Data message processor callback.  This function processes
//  400  *          any incoming data - probably from other devices.  So, based
//  401  *          on cluster ID, perform the intended action.
//  402  *
//  403  * @param   none
//  404  *
//  405  * @return  none
//  406  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  407 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  408 {
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  409   uint16 flashTime;
//  410   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??SampleApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB_0:
        JNZ     ??SampleApp_MessageMSGCB_1
//  411   {
//  412 
//  413     case SAMPLEAPP_FLASH_CLUSTERID:
//  414       flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  415       HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        ; Setup parameters for call to function HalLedBlink
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  416       break;
//  417   }
//  418 }
??SampleApp_MessageMSGCB_1:
        LJMP    ??Subroutine11_0 & 0xFFFF
        CFI EndBlock cfiBlock10
//  419 
//  420 /*********************************************************************
//  421  * @fn      SampleApp_SendPeriodicMessage
//  422  *
//  423  * @brief   Send the periodic message.
//  424  *
//  425  * @param   none
//  426  *
//  427  * @return  none
//  428  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  429 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  430 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  431   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  432                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  433                        1,
//  434                        (uint8*)&SampleAppPeriodicCounter,
//  435                        &SampleApp_TransID,
//  436                        AF_DISCV_ROUTE,
//  437                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
        MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock11
//  438   {
//  439   }
//  440   else
//  441   {
//  442     // Error occurred in request to send.
//  443   }
//  444 }
//  445 
//  446 /*********************************************************************
//  447  * @fn      SampleApp_SendFlashMessage
//  448  *
//  449  * @brief   Send the flash message to group 1.
//  450  *
//  451  * @param   flashTime - in milliseconds
//  452  *
//  453  * @return  none
//  454  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  455 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  456 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  457   uint8 buffer[3];
//  458   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  459   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  460   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  461 
//  462   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  463                        SAMPLEAPP_FLASH_CLUSTERID,
//  464                        3,
//  465                        buffer,
//  466                        &SampleApp_TransID,
//  467                        AF_DISCV_ROUTE,
//  468                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  469   {
//  470   }
//  471   else
//  472   {
//  473     // Error occurred in request to send.
//  474   }
//  475 }
        MOV     A,#0x3
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock12
//  476 
//  477 /*********************************************************************
//  478  * @fn      SampleApp_SendPointToPointMessage
//  479  *
//  480  * @brief   Send the flash message to point.
//  481  *
//  482  *
//  483  * @return  none
//  484  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  485 void SampleApp_SendPointToPointMessage( void )
SampleApp_SendPointToPointMessage:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function SampleApp_SendPointToPointMessage
        CODE
//  486 {    
        FUNCALL SampleApp_SendPointToPointMessage, type_change
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPointToPointMessage, type_change
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPointToPointMessage, type_change
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPointToPointMessage, type_change
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPointToPointMessage, type_change
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPointToPointMessage, type_change
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPointToPointMessage, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPointToPointMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 47)
//  487   uint8 buf[37];
//  488   type_change(accX);
        ; Setup parameters for call to function type_change
        MOV     DPTR,#accX
        LCALL   ?Subroutine7 & 0xFFFF
//  489   buf[0]=temp[0];  buf[1]=temp[1]; 
??CrossCallReturnLabel_32:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//  490   buf[2]=temp[2];  buf[3]=temp[3];
??CrossCallReturnLabel_6:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_12:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  491   buf[4]=temp[4];  buf[5]=temp[5];
??CrossCallReturnLabel_18:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_24:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  492 
//  493   type_change(accY);
        ; Setup parameters for call to function type_change
        MOV     DPTR,#accY
        LCALL   ?Subroutine7 & 0xFFFF
//  494   buf[6]=temp[0]; buf[7]=temp[1]; 
??CrossCallReturnLabel_33:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//  495   buf[8]=temp[2];  buf[9]=temp[3];
??CrossCallReturnLabel_7:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_13:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  496   buf[10]=temp[4];  buf[11]=temp[5];
??CrossCallReturnLabel_19:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_25:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  497   
//  498   type_change(accZ);
        ; Setup parameters for call to function type_change
        MOV     DPTR,#accZ
        LCALL   ?Subroutine7 & 0xFFFF
//  499   buf[12]=temp[0];  buf[13]=temp[1]; 
??CrossCallReturnLabel_34:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//  500   buf[14]=temp[2];  buf[15]=temp[3];
??CrossCallReturnLabel_8:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_14:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  501   buf[16]=temp[4];  buf[17]=temp[5];
??CrossCallReturnLabel_20:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_26:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  502   
//  503   type_change(graX);
        ; Setup parameters for call to function type_change
        MOV     DPTR,#graX
        LCALL   ?Subroutine7 & 0xFFFF
//  504   buf[18]=temp[0];  buf[19]=temp[1]; 
??CrossCallReturnLabel_35:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//  505   buf[20]=temp[2];  buf[21]=temp[3];
??CrossCallReturnLabel_9:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_15:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  506   buf[22]=temp[4];  buf[23]=temp[5];
??CrossCallReturnLabel_21:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_27:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  507 
//  508   type_change(graY);
        ; Setup parameters for call to function type_change
        MOV     DPTR,#graY
        LCALL   ?Subroutine7 & 0xFFFF
//  509   buf[24]=temp[0];  buf[25]=temp[1]; 
??CrossCallReturnLabel_36:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_4:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//  510   buf[26]=temp[2];  buf[27]=temp[3];
??CrossCallReturnLabel_10:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_16:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  511   buf[28]=temp[4];  buf[29]=temp[5];
??CrossCallReturnLabel_22:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_28:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  512 
//  513   type_change(graZ);
        ; Setup parameters for call to function type_change
        MOV     DPTR,#graZ
        LCALL   ?Subroutine7 & 0xFFFF
//  514   buf[30]=temp[0];  buf[31]=temp[1]; 
??CrossCallReturnLabel_37:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_5:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
//  515   buf[32]=temp[2];  buf[33]=temp[3];
??CrossCallReturnLabel_11:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_17:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
//  516   buf[34]=temp[4];  buf[35]=temp[5];
??CrossCallReturnLabel_23:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_29:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x23
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  517   buf[36]= 'D';
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x44
        MOVX    @DPTR,A
//  518   HalLedBlink( HAL_LED_1, 4, 50, 200 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x38
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  519   if ( AF_DataRequest( &Point_To_Point_DstAddr,
//  520                        &SampleApp_epDesc,
//  521                        SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
//  522                        37,
//  523                        buf,
//  524                        &SampleApp_TransID,
//  525                        AF_DISCV_ROUTE,
//  526                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     ?V0 + 0,#0x25
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 56)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#Point_To_Point_DstAddr & 0xff
        MOV     R3,#(Point_To_Point_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 47)
//  527   {
//  528   }
//  529  else
//  530   {
//  531     // Error occurred in request to send.
//  532   }
//  533 }
        MOV     A,#0x25
        CFI EndBlock cfiBlock13
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock14
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??type_change?relay
        MOV     DPTR,#temp
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#temp + 5
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#temp + 4
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#temp + 3
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#temp + 2
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 47)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#temp + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
//  534 
//  535 /*********************************************************
//  536 **************** ˝æ›∫œ≥…∫Ø ˝**************************
//  537 *********************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  538 void type_change(int num)
type_change:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function type_change
        CODE
//  539 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  540   if(num<0)
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??type_change_0
//  541   {
//  542     num = -num;
        CLR     C
        CLR     A
        SUBB    A,R4
        MOV     R0,A
        CLR     A
        SUBB    A,R5
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
//  543     temp[0] = '-';
        MOV     DPTR,#temp
        MOV     A,#0x2d
        SJMP    ??type_change_1
//  544   }
//  545   else
//  546   {
//  547     temp[0] = '+';
??type_change_0:
        MOV     DPTR,#temp
        MOV     A,#0x2b
//  548   }
??type_change_1:
        LCALL   ?Subroutine6 & 0xFFFF
//  549   temp[1] = num/10000+0x30;
??CrossCallReturnLabel_30:
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        INC     DPTR
        LCALL   ?Subroutine6 & 0xFFFF
//  550   temp[2] = num%10000/1000+0x30;
??CrossCallReturnLabel_31:
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine8 & 0xFFFF
//  551   temp[3] = num%1000/100+0x30;
??CrossCallReturnLabel_38:
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine8 & 0xFFFF
//  552   temp[4] = num%100/10+0x30;
??CrossCallReturnLabel_39:
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine8 & 0xFFFF
//  553   temp[5] = num%10+0x30;
??CrossCallReturnLabel_40:
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        INC     DPTR
        MOVX    @DPTR,A
//  554 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond60) CFA_SP SP+-5
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond61) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond61) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond61) CFA_SP SP+-5
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        MOV     A,R0
        ADD     A,#0x30
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond64) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond64) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond64) CFA_SP SP+-5
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x10
        MOV     R3,#0x27
        RET
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPointToPointMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPointToPointMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??type_change?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    type_change

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        END
// 
// 1 465 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//    34 bytes in segment XDATA_ROM_C
//    71 bytes in segment XDATA_Z
// 
// 1 513 bytes of CODE  memory
//    34 bytes of CONST memory
//     0 bytes of DATA  memory (+ 1 byte shared)
//    71 bytes of XDATA memory
//
//Errors: none
//Warnings: none
