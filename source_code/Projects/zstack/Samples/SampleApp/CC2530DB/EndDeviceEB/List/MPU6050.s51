///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        20/May/2018  10:49:58 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\梁宇\项目2\zigbee读取MPU6050                   /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\Source\MPU6050.c        /
//    Command line       =  -f "E:\梁宇\项目2\zigbee读取MPU6050               /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools /
//                          \CC2530DB\f8wEndev.cfg" (-DCPU32MHZ               /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools /
//                          \CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0  /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xF000                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "E:\梁宇\项目2\zigbee读取M /
//                          PU6050 WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\P /
//                          rojects\zstack\Samples\SampleApp\Source\MPU6050.c /
//                          " -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D      /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Li /
//                          st\" -lA "E:\梁宇\项目2\zigbee读取MPU6050         /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Li /
//                          st\" --diag_suppress Pe001,Pa010 -o               /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Ob /
//                          j\" -e --no_code_motion --debug --core=plain      /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\" -I           /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\Source\"    /
//                          -I "E:\梁宇\项目2\zigbee读取MPU6050               /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain /
//                          \TI2530DB\" -I "E:\梁宇\项目2\zigbee读取MPU6050   /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\include\" -I                      /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\target\CC2530EB\" -I              /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\include\" -I                      /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\high_level\" -I                   /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\" -I              /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\single_chip\" -I  /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mt\" -I "E:\梁宇\项目2\zigbee读取MPU6 /
//                          050 WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\Components\osal\include\" -I                 /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\services\saddr\" -I                   /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\services\sdata\" -I                   /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\af\" -I                         /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\nwk\" -I                        /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sapi\" -I                       /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sec\" -I                        /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sys\" -I                        /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\zdo\" -I                        /
//                          "E:\梁宇\项目2\zigbee读取MPU6050                  /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\" -I "E:\梁宇\项目2\zigbee读取MP /
//                          U6050 WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\Components\zmac\f8w\" -Ohz                 /
//                          --require_prototypes                              /
//    List file          =  E:\梁宇\项目2\zigbee读取MPU6050                   /
//                          WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Li /
//                          st\MPU6050.s51                                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MPU6050

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ALLInit?relay
        FUNCTION ??ALLInit?relay,0203H
        PUBLIC ??InitMPU6050?relay
        FUNCTION ??InitMPU6050?relay,0203H
        PUBLIC ??Init_IO?relay
        FUNCTION ??Init_IO?relay,0203H
        PUBLIC ??MPU6050_RecvACK?relay
        FUNCTION ??MPU6050_RecvACK?relay,0203H
        PUBLIC ??MPU6050_RecvByte?relay
        FUNCTION ??MPU6050_RecvByte?relay,0203H
        PUBLIC ??MPU6050_SendACK?relay
        FUNCTION ??MPU6050_SendACK?relay,0203H
        PUBLIC ??MPU6050_SendByte?relay
        FUNCTION ??MPU6050_SendByte?relay,0203H
        PUBLIC ??MPU6050_Start?relay
        FUNCTION ??MPU6050_Start?relay,0203H
        PUBLIC ??MPU6050_Stop?relay
        FUNCTION ??MPU6050_Stop?relay,0203H
        PUBLIC ??Multiple_read_MPU6050?relay
        FUNCTION ??Multiple_read_MPU6050?relay,0203H
        PUBLIC ??ReadSDA?relay
        FUNCTION ??ReadSDA?relay,0203H
        PUBLIC ??Single_Read_MPU6050?relay
        FUNCTION ??Single_Read_MPU6050?relay,0203H
        PUBLIC ??Single_Write_MPU6050?relay
        FUNCTION ??Single_Write_MPU6050?relay,0203H
        PUBLIC ??WriteSCL_0?relay
        FUNCTION ??WriteSCL_0?relay,0203H
        PUBLIC ??WriteSCL_1?relay
        FUNCTION ??WriteSCL_1?relay,0203H
        PUBLIC ??WriteSDA_0?relay
        FUNCTION ??WriteSDA_0?relay,0203H
        PUBLIC ??WriteSDA_1?relay
        FUNCTION ??WriteSDA_1?relay,0203H
        PUBLIC ??delay_us?relay
        FUNCTION ??delay_us?relay,0203H
        PUBLIC ALLInit
        FUNCTION ALLInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC InitMPU6050
        FUNCTION InitMPU6050,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Init_IO
        FUNCTION Init_IO,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC MPU6050_RecvACK
        FUNCTION MPU6050_RecvACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MPU6050_RecvByte
        FUNCTION MPU6050_RecvByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MPU6050_SendACK
        FUNCTION MPU6050_SendACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MPU6050_SendByte
        FUNCTION MPU6050_SendByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MPU6050_Start
        FUNCTION MPU6050_Start,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MPU6050_Stop
        FUNCTION MPU6050_Stop,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Multiple_read_MPU6050
        FUNCTION Multiple_read_MPU6050,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC ReadSDA
        FUNCTION ReadSDA,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Single_Read_MPU6050
        FUNCTION Single_Read_MPU6050,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Single_Write_MPU6050
        FUNCTION Single_Write_MPU6050,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC WriteSCL_0
        FUNCTION WriteSCL_0,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteSCL_1
        FUNCTION WriteSCL_1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteSDA_0
        FUNCTION WriteSDA_0,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteSDA_1
        FUNCTION WriteSDA_1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK _A_P0
        PUBWEAK _A_PSW
        PUBLIC accX
        PUBLIC accY
        PUBLIC accZ
        PUBLIC delay_us
        FUNCTION delay_us,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC graX
        PUBLIC graY
        PUBLIC graZ
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Onboard_wait        SYMBOL "Onboard_wait"
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
ALLInit             SYMBOL "ALLInit"
??ALLInit?relay     SYMBOL "?relay", ALLInit
InitMPU6050         SYMBOL "InitMPU6050"
??InitMPU6050?relay SYMBOL "?relay", InitMPU6050
Init_IO             SYMBOL "Init_IO"
??Init_IO?relay     SYMBOL "?relay", Init_IO
MPU6050_RecvACK     SYMBOL "MPU6050_RecvACK"
??MPU6050_RecvACK?relay SYMBOL "?relay", MPU6050_RecvACK
MPU6050_RecvByte    SYMBOL "MPU6050_RecvByte"
??MPU6050_RecvByte?relay SYMBOL "?relay", MPU6050_RecvByte
MPU6050_SendACK     SYMBOL "MPU6050_SendACK"
??MPU6050_SendACK?relay SYMBOL "?relay", MPU6050_SendACK
MPU6050_SendByte    SYMBOL "MPU6050_SendByte"
??MPU6050_SendByte?relay SYMBOL "?relay", MPU6050_SendByte
MPU6050_Start       SYMBOL "MPU6050_Start"
??MPU6050_Start?relay SYMBOL "?relay", MPU6050_Start
MPU6050_Stop        SYMBOL "MPU6050_Stop"
??MPU6050_Stop?relay SYMBOL "?relay", MPU6050_Stop
Multiple_read_MPU6050 SYMBOL "Multiple_read_MPU6050"
??Multiple_read_MPU6050?relay SYMBOL "?relay", Multiple_read_MPU6050
ReadSDA             SYMBOL "ReadSDA"
??ReadSDA?relay     SYMBOL "?relay", ReadSDA
Single_Read_MPU6050 SYMBOL "Single_Read_MPU6050"
??Single_Read_MPU6050?relay SYMBOL "?relay", Single_Read_MPU6050
Single_Write_MPU6050 SYMBOL "Single_Write_MPU6050"
??Single_Write_MPU6050?relay SYMBOL "?relay", Single_Write_MPU6050
WriteSCL_0          SYMBOL "WriteSCL_0"
??WriteSCL_0?relay  SYMBOL "?relay", WriteSCL_0
WriteSCL_1          SYMBOL "WriteSCL_1"
??WriteSCL_1?relay  SYMBOL "?relay", WriteSCL_1
WriteSDA_0          SYMBOL "WriteSDA_0"
??WriteSDA_0?relay  SYMBOL "?relay", WriteSDA_0
WriteSDA_1          SYMBOL "WriteSDA_1"
??WriteSDA_1?relay  SYMBOL "?relay", WriteSDA_1
delay_us            SYMBOL "delay_us"
??delay_us?relay    SYMBOL "?relay", delay_us

        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H

// E:\梁宇\项目2\zigbee读取MPU6050 WIN3.0\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zstack\Samples\SampleApp\Source\MPU6050.c
//    1 /***************************************/
//    2 /*           WeBee团队                 */
//    3 /*项目类型：  外包项目                 */
//    4 /*例程名称：  MPU6050                  */
//    5 /*建立时间：  2018/05                  */
//    6 /*描述：显示加速度计和陀螺仪的6位原始数据
//    7 ****************************************/
//    8 #include "ioCC2530.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d0H
// union <unnamed> volatile __sfr _A_PSW
_A_PSW:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    9 #include "MPU6050.h"
//   10 #include "OnBoard.h"
//   11 #include "hal_types.h"
//   12 
//   13 #define uint  unsigned int
//   14 #define uchar unsigned char
//   15 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   16 int accX,accY,accZ,graX,graY,graZ;
accX:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
accY:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
accZ:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
graX:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
graY:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
graZ:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   17 
//   18 //****************************************
//   19 //函数声明
//   20 //****************************************
//   21 void WriteSDA_0(void);
//   22 void WriteSDA_1(void);
//   23 void WriteSCL_0(void);
//   24 void WriteSCL_1(void);
//   25 void ReadSDA(void);
//   26 void Init_IO(void);
//   27 void MPU6050_Start(void);
//   28 void MPU6050_Stop(void);
//   29 void MPU6050_SendACK(uchar ack);
//   30 uchar MPU6050_RecvACK(void);
//   31 void MPU6050_SendByte(uchar data);
//   32 uchar MPU6050_RecvByte(void);
//   33 void Single_Write_MPU6050(uchar REG_Address,uchar REG_data);
//   34 uchar Single_Read_MPU6050(uchar REG_Address);
//   35 void InitMPU6050(void);
//   36 void ALLInit(void);
//   37 void Multiple_read_MPU6050(void);
//   38 void delay_us(unsigned int u);
//   39 
//   40 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   41 void ALLInit(void)
ALLInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ALLInit
        CODE
//   42 {
        FUNCALL ALLInit, Init_IO
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ALLInit, InitMPU6050
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   43    Init_IO();
        ; Setup parameters for call to function Init_IO
        LCALL   ??Init_IO?relay
//   44    InitMPU6050();
        ; Setup parameters for call to function InitMPU6050
        LCALL   ??InitMPU6050?relay
//   45 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock0
//   46 
//   47 /****************us延时函数 32M晶振 单周期MCU********************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   48 void delay_us(unsigned int u)
delay_us:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function delay_us
        CODE
//   49 {
        FUNCALL delay_us, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   50    u=4*u;
//   51    MicroWait(u);
        ; Setup parameters for call to function Onboard_wait
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??Onboard_wait?relay
//   52 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   53 
//   54 /*****************************MPU6050*******************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   55 void WriteSDA_0(void) 
WriteSDA_0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function WriteSDA_0
        CODE
//   56 {
        ; Saved register size: 0
        ; Auto size: 0
//   57     P0DIR|=0x40;
        ORL     0xfd,#0x40
//   58     SDA=0;
        CLR     0x80.7
//   59 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE P0DIR
        REQUIRE _A_P0
//   60 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   61 void WriteSDA_1() 
WriteSDA_1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function WriteSDA_1
        CODE
//   62 {
        ; Saved register size: 0
        ; Auto size: 0
//   63     P0DIR|=0x40;
        ORL     0xfd,#0x40
//   64     SDA=1;
        SETB    0x80.7
//   65 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
        REQUIRE P0DIR
        REQUIRE _A_P0
//   66     

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   67 void WriteSCL_0()    
WriteSCL_0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function WriteSCL_0
        CODE
//   68 {
        ; Saved register size: 0
        ; Auto size: 0
//   69     P0DIR|=0x80;
        ORL     0xfd,#0x80
//   70     SCL=0;
        CLR     0x80.6
//   71 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
        REQUIRE P0DIR
        REQUIRE _A_P0
//   72 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   73 void WriteSCL_1()    
WriteSCL_1:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function WriteSCL_1
        CODE
//   74 {
        ; Saved register size: 0
        ; Auto size: 0
//   75     P0DIR|=0x80;
        ORL     0xfd,#0x80
//   76     SCL=1;
        SETB    0x80.6
//   77 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
        REQUIRE P0DIR
        REQUIRE _A_P0
//   78 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   79 void ReadSDA(void)//sda输入,=0
ReadSDA:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ReadSDA
        CODE
//   80 {
        ; Saved register size: 0
        ; Auto size: 0
//   81     P0DIR&=0xBF;
        ANL     0xfd,#0xbf
//   82 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
        REQUIRE P0DIR
//   83 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   84 void Init_IO(void)
Init_IO:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Init_IO
        CODE
//   85 {
        ; Saved register size: 0
        ; Auto size: 0
//   86   P0DIR|=0xc0;
        ORL     0xfd,#0xc0
//   87   P0SEL&=0x3f;
        ANL     0xf3,#0x3f
//   88 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
        REQUIRE P0DIR
        REQUIRE P0SEL
//   89 
//   90 
//   91 /**************************************
//   92 起始信号
//   93 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   94 void MPU6050_Start()  
MPU6050_Start:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function MPU6050_Start
        CODE
//   95 {
        FUNCALL MPU6050_Start, WriteSDA_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, WriteSCL_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, WriteSDA_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, WriteSCL_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   96     WriteSDA_1();
        ; Setup parameters for call to function WriteSDA_1
        LCALL   ??WriteSDA_1?relay
//   97     WriteSCL_1();
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine3 & 0xFFFF
//   98     delay_us(5);
//   99     WriteSDA_0();
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function WriteSDA_0
        LCALL   ??WriteSDA_0?relay
//  100     delay_us(5);
        ; Setup parameters for call to function delay_us
        LCALL   ??Subroutine6_0 & 0xFFFF
//  101     WriteSCL_0();
//  102     delay_us(5);
//  103 }
??CrossCallReturnLabel_19:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock8
//  104 
//  105 /**************************************
//  106 停止信号
//  107 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  108 void MPU6050_Stop()  
MPU6050_Stop:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function MPU6050_Stop
        CODE
//  109 {    
        FUNCALL MPU6050_Stop, WriteSDA_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Stop, WriteSCL_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Stop, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Stop, WriteSDA_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  110    WriteSDA_0();
        ; Setup parameters for call to function WriteSDA_0
        LCALL   ??WriteSDA_0?relay
//  111    WriteSCL_1();
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine3 & 0xFFFF
//  112    delay_us(5);
//  113    WriteSDA_1();
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function WriteSDA_1
        LCALL   ??WriteSDA_1?relay
        CFI EndBlock cfiBlock9
//  114 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond12) CFA_SP SP+-5
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond13) CFA_SP SP+-5
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        LCALL   ??WriteSCL_1?relay
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14
//  115 
//  116 //I2C发送应答信号
//  117 //入口参数:ack (0:ACK 1:NAK)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  118 void MPU6050_SendACK(uchar ack)
MPU6050_SendACK:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function MPU6050_SendACK
        CODE
//  119 {
        FUNCALL MPU6050_SendACK, WriteSCL_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendACK, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendACK, WriteSCL_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendACK, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  120     
//  121     SDA=ack;                     //写应答信号
        MOV     C,0xE0 /* A   */.0
        MOV     0x80.7,C
//  122     WriteSCL_1();                   //拉高时钟线
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine2 & 0xFFFF
//  123     delay_us(5);//Delay5us();    //延时
//  124     WriteSCL_0();                   //拉低时钟线
//  125     delay_us(5);//Delay5us();    //延时
//  126 }
??CrossCallReturnLabel_17:
        SJMP    ??Subroutine8_0
        CFI EndBlock cfiBlock15
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??WriteSCL_1?relay
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
        ; Setup parameters for call to function WriteSCL_0
        ; Setup parameters for call to function WriteSCL_0
        ; Setup parameters for call to function WriteSCL_0
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine7_0:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond24) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond24) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond24) CFA_SP SP+-5
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ??WriteSCL_0?relay
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     R1,A
        CFI EndBlock cfiBlock28
        REQUIRE ??Subroutine8_0
        ; // Fall through to label ??Subroutine8_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine8_0:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock29
//  127 
//  128 /**************************************
//  129 发送应答信号
//  130 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  131 uchar MPU6050_RecvACK()
MPU6050_RecvACK:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function MPU6050_RecvACK
        CODE
//  132 {
        FUNCALL MPU6050_RecvACK, WriteSCL_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvACK, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvACK, WriteSCL_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvACK, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  133     ReadSDA();
        ANL     0xfd,#0xbf
//  134     WriteSCL_1();                       //拉高时钟线
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine3 & 0xFFFF
//  135     delay_us(5);//Delay5us();    //延时
//  136     CY=SDA;                      //读应答信号
??CrossCallReturnLabel_2:
        MOV     C,0x80.7
        MOV     0xd0.7,C
//  137     WriteSCL_0();                       //拉低时钟线
        ; Setup parameters for call to function WriteSCL_0
        LCALL   ??Subroutine7_0 & 0xFFFF
//  138     delay_us(5);//Delay5us();    //延时
//  139     P0DIR|=0x00;
??CrossCallReturnLabel_20:
        MOV     0xfd,0xfd
//  140     return CY;
        MOV     C,0xd0.7
        CLR     A
        RLC     A
        MOV     R1,A
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock30
        REQUIRE _A_PSW
        REQUIRE _A_P0
        REQUIRE P0DIR
//  141 }
//  142 
//  143 /**************************************
//  144 向IIC总线发送一个字节数据
//  145 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  146 void MPU6050_SendByte(uchar data)
MPU6050_SendByte:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function MPU6050_SendByte
        CODE
//  147 {
        FUNCALL MPU6050_SendByte, WriteSDA_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, WriteSDA_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, WriteSCL_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, WriteSCL_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, MPU6050_RecvACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  148     uchar i;
//  149     SDA_OUT();
        ORL     0xfd,#0x80
//  150     
//  151     for(i=0;i<8;i++)         //8位计数器
        MOV     R6,#0x8
//  152     {       
//  153         if(data&0x80)
??MPU6050_SendByte_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JNC     ??MPU6050_SendByte_1
//  154         {WriteSDA_1();}
        ; Setup parameters for call to function WriteSDA_1
        LCALL   ??WriteSDA_1?relay
        SJMP    ??MPU6050_SendByte_2
//  155         else 
//  156         {WriteSDA_0();}
??MPU6050_SendByte_1:
        ; Setup parameters for call to function WriteSDA_0
        LCALL   ??WriteSDA_0?relay
//  157         
//  158         data<<=1;
??MPU6050_SendByte_2:
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R7,A
//  159         WriteSCL_1();            //拉高时钟线
        ; Setup parameters for call to function WriteSCL_1
        LCALL   ?Subroutine2 & 0xFFFF
//  160         delay_us(5);          //延时
//  161         WriteSCL_0();            //拉低时钟线
//  162         delay_us(5);          //延时
//  163     }
??CrossCallReturnLabel_18:
        DEC     R6
        MOV     A,R6
        JNZ     ??MPU6050_SendByte_0
//  164     MPU6050_RecvACK();
        ; Setup parameters for call to function MPU6050_RecvACK
        LCALL   ??MPU6050_RecvACK?relay
//  165 }
        SJMP    ??Subroutine8_0
        CFI EndBlock cfiBlock31
        REQUIRE P0DIR
//  166 
//  167 /**************************************
//  168 从IIC总线接收一个字节数据
//  169 **************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  170 uchar MPU6050_RecvByte()
MPU6050_RecvByte:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function MPU6050_RecvByte
        CODE
//  171 {
        FUNCALL MPU6050_RecvByte, WriteSDA_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvByte, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvByte, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  172   
//  173     uchar i;
//  174     uchar dat = 0;
        MOV     R6,#0x0
//  175     WriteSDA_1();                  //使能内部上拉,准备读取数据,
        ; Setup parameters for call to function WriteSDA_1
        LCALL   ??WriteSDA_1?relay
//  176     for (i=0; i<8; i++)         //8位计数器
        MOV     R7,#0x8
//  177     {
//  178         dat <<= 1;
//  179         SCL = 1;                //拉高时钟线
??MPU6050_RecvByte_0:
        SETB    0x80.6
//  180         delay_us(5);                 //延时
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
//  181         dat |= SDA;             //读数据               
        MOV     C,0x80.7
        CLR     A
        RLC     A
        MOV     R0,A
        MOV     A,R6
        RLC     A
        ORL     A,R0
        MOV     R6,A
//  182         SCL = 0;                //拉低时钟线
        CLR     0x80.6
//  183          delay_us(5);                 //延时
        ; Setup parameters for call to function delay_us
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??delay_us?relay
//  184     }
        DEC     R7
        MOV     A,R7
        JNZ     ??MPU6050_RecvByte_0
//  185     return dat;
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock32
        REQUIRE _A_P0
//  186 
//  187 }
//  188 
//  189 //******单字节写入*******************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  190 void Single_Write_MPU6050(uchar REG_Address,uchar REG_data)
Single_Write_MPU6050:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function Single_Write_MPU6050
        CODE
//  191 {
        FUNCALL Single_Write_MPU6050, MPU6050_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write_MPU6050, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write_MPU6050, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write_MPU6050, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write_MPU6050, MPU6050_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  192     MPU6050_Start();                  //起始信号
        ; Setup parameters for call to function MPU6050_Start
        LCALL   ?Subroutine4 & 0xFFFF
//  193     MPU6050_SendByte(SlaveAddress);   //发送设备地址+写信号
//  194     MPU6050_SendByte(REG_Address);    //内部寄存器地址，
//  195     MPU6050_SendByte(REG_data);       //内部寄存器数据，
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function MPU6050_SendByte
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MPU6050_SendByte?relay
//  196     MPU6050_Stop();                   //发送停止信号
        ; Setup parameters for call to function MPU6050_Stop
        LCALL   ??MPU6050_Stop?relay
//  197 }
        LJMP    ??Subroutine8_0 & 0xFFFF
        CFI EndBlock cfiBlock33
//  198 
//  199 //********单字节读取*****************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  200 uchar Single_Read_MPU6050(uchar REG_Address)
Single_Read_MPU6050:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function Single_Read_MPU6050
        CODE
//  201 {
        FUNCALL Single_Read_MPU6050, MPU6050_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_MPU6050, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_MPU6050, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_MPU6050, MPU6050_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_MPU6050, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_MPU6050, MPU6050_RecvByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_MPU6050, MPU6050_SendACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read_MPU6050, MPU6050_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  202 	uchar REG_data;
//  203 	MPU6050_Start();                   //起始信号
        ; Setup parameters for call to function MPU6050_Start
        LCALL   ?Subroutine4 & 0xFFFF
//  204 	MPU6050_SendByte(SlaveAddress);    //发送设备地址+写信号
//  205 	MPU6050_SendByte(REG_Address);     //发送存储单元地址，从0开始	
//  206 	MPU6050_Start();                   //起始信号
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function MPU6050_Start
        LCALL   ??MPU6050_Start?relay
//  207 	MPU6050_SendByte(SlaveAddress+1);  //发送设备地址+读信号
        ; Setup parameters for call to function MPU6050_SendByte
        MOV     R1,#-0x2f
        LCALL   ??MPU6050_SendByte?relay
//  208 	REG_data=MPU6050_RecvByte();       //读出寄存器数据
        ; Setup parameters for call to function MPU6050_RecvByte
        LCALL   ??MPU6050_RecvByte?relay
        MOV     A,R1
        MOV     R6,A
//  209 	MPU6050_SendACK(1);                //接收应答信号
        ; Setup parameters for call to function MPU6050_SendACK
        MOV     R1,#0x1
        LCALL   ??MPU6050_SendACK?relay
//  210 	MPU6050_Stop();                    //停止信号
        ; Setup parameters for call to function MPU6050_Stop
        LCALL   ??MPU6050_Stop?relay
//  211 	return REG_data;
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock34
//  212 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        LCALL   ??MPU6050_Start?relay
        ; Setup parameters for call to function MPU6050_SendByte
        ; Setup parameters for call to function MPU6050_SendByte
        MOV     R1,#-0x30
        LCALL   ??MPU6050_SendByte?relay
        ; Setup parameters for call to function MPU6050_SendByte
        ; Setup parameters for call to function MPU6050_SendByte
        MOV     A,R7
        MOV     R1,A
        LCALL   ??MPU6050_SendByte?relay
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37
//  213 
//  214 //*****************************************************************
//  215 
//  216 //初始化MPU6050，根据需要请参考pdf进行修改************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  217 void InitMPU6050()
InitMPU6050:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function InitMPU6050
        CODE
//  218 {
        FUNCALL InitMPU6050, Single_Write_MPU6050
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_Write_MPU6050
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_Write_MPU6050
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_Write_MPU6050
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_Write_MPU6050
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  219 	Single_Write_MPU6050(PWR_MGMT_1,0x00);	//解除休眠状态
        ; Setup parameters for call to function Single_Write_MPU6050
        MOV     R2,#0x0
        MOV     R1,#0x6b
        LCALL   ??Single_Write_MPU6050?relay
//  220 	Single_Write_MPU6050(SMPLRT_DIV,0x07);
        ; Setup parameters for call to function Single_Write_MPU6050
        MOV     R2,#0x7
        MOV     R1,#0x19
        LCALL   ??Single_Write_MPU6050?relay
//  221 	Single_Write_MPU6050(CONFIG,0x06);
        ; Setup parameters for call to function Single_Write_MPU6050
        MOV     R2,#0x6
        MOV     R1,#0x1a
        LCALL   ??Single_Write_MPU6050?relay
//  222 	Single_Write_MPU6050(GYRO_CONFIG,0x18);
        ; Setup parameters for call to function Single_Write_MPU6050
        MOV     R2,#0x18
        MOV     R1,#0x1b
        LCALL   ??Single_Write_MPU6050?relay
//  223 	Single_Write_MPU6050(ACCEL_CONFIG,0x01);
        ; Setup parameters for call to function Single_Write_MPU6050
        MOV     R2,#0x1
        MOV     R1,#0x1c
        LCALL   ??Single_Write_MPU6050?relay
//  224 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock38
//  225 //*********************************************************
//  226 //
//  227 //连续读出MPU6050内部数据
//  228 //
//  229 //*********************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  230 void Multiple_read_MPU6050(void)
Multiple_read_MPU6050:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function Multiple_read_MPU6050
        CODE
//  231 {   
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_read_MPU6050, Single_Read_MPU6050
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  232   char BUF[12]; //接收数据缓存区  
//  233   BUF[0]=Single_Read_MPU6050(ACCEL_XOUT_H);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x3b
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  234   BUF[1]=Single_Read_MPU6050(ACCEL_XOUT_L);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x3c
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     ?V0 + 4,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  235   BUF[2]=Single_Read_MPU6050(ACCEL_YOUT_H);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x3d
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     ?V0 + 2,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  236   BUF[3]=Single_Read_MPU6050(ACCEL_YOUT_L);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x3e
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     ?V0 + 3,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  237   BUF[4]=Single_Read_MPU6050(ACCEL_ZOUT_H);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x3f
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     ?V0 + 1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  238   BUF[5]=Single_Read_MPU6050(ACCEL_ZOUT_L);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x40
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     ?V0 + 10,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  239   
//  240   BUF[6]=Single_Read_MPU6050(GYRO_XOUT_H);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x43
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     ?V0 + 0,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  241   BUF[7]=Single_Read_MPU6050(GYRO_XOUT_L);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x44
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     ?V0 + 8,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  242   BUF[8]=Single_Read_MPU6050(GYRO_YOUT_H);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x45
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     R7,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  243   BUF[9]=Single_Read_MPU6050(GYRO_YOUT_L);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x46
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     ?V0 + 6,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  244   BUF[10]=Single_Read_MPU6050(GYRO_ZOUT_H);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x47
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     R6,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  245   BUF[11]=Single_Read_MPU6050(GYRO_ZOUT_L);
        ; Setup parameters for call to function Single_Read_MPU6050
        MOV     R1,#0x48
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     ?V0 + 12,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  246   
//  247   accX=(BUF[0]<<8)|BUF[1]; 
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 4
        MOV     DPTR,#accX
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  248   accY=(BUF[2]<<8)|BUF[3]; 
        MOV     R1,?V0 + 2
        MOV     ?V0 + 2,?V0 + 3
        MOV     A,?V0 + 2
        MOV     DPTR,#accY
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  249   accZ=(BUF[4]<<8)|BUF[5]; 
        MOV     A,?V0 + 10
        MOV     DPTR,#accZ
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  250   graX=(BUF[6]<<8)|BUF[7];
        MOV     A,?V0 + 8
        MOV     DPTR,#graX
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  251   graY=(BUF[8]<<8)|BUF[9];
        MOV     A,R7
        MOV     R1,A
        MOV     A,?V0 + 6
        MOV     DPTR,#graY
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  252   graZ=(BUF[10]<<8)|BUF[11];
        MOV     A,R6
        MOV     R1,A
        MOV     A,?V0 + 12
        MOV     DPTR,#graZ
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  253 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        LCALL   ??Single_Read_MPU6050?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ALLInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ALLInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delay_us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteSDA_0?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteSDA_0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteSDA_1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteSDA_1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteSCL_0?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteSCL_0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??WriteSCL_1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    WriteSCL_1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadSDA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadSDA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Init_IO?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Init_IO

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MPU6050_Start?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MPU6050_Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MPU6050_Stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MPU6050_Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MPU6050_SendACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MPU6050_SendACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MPU6050_RecvACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MPU6050_RecvACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MPU6050_SendByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MPU6050_SendByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MPU6050_RecvByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MPU6050_RecvByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Single_Write_MPU6050?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Single_Write_MPU6050

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Single_Read_MPU6050?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Single_Read_MPU6050

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitMPU6050?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitMPU6050

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Multiple_read_MPU6050?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Multiple_read_MPU6050

        END
//  254 
// 
// 667 bytes in segment BANKED_CODE
// 108 bytes in segment BANK_RELAYS
//   4 bytes in segment SFR_AN
//  12 bytes in segment XDATA_Z
// 
// 775 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 4 bytes shared)
//  12 bytes of XDATA memory
//
//Errors: none
//Warnings: none
