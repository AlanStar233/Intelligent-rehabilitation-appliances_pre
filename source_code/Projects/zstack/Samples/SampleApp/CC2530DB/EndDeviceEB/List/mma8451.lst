###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         19/May/2018  16:20:31 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\梁宇\项目2\zigbee读取MPU6050                    #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\Source\mma8451.c             #
#    Command line       =  -f "E:\梁宇\项目2\zigbee读取MPU6050                #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "E:\梁宇\项目2\zigbee读取MP #
#                          U6050 WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xF000                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "E:\梁宇\项目2\zigbee读取MP #
#                          U6050 WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projec #
#                          ts\zstack\Samples\SampleApp\Source\mma8451.c" -D   #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D            #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC "E:\梁宇\项目2\zigbee读取MPU6050               #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\"  #
#                          -lA "E:\梁宇\项目2\zigbee读取MPU6050               #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\"  #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\"   #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "E:\梁宇\项目2\zigbee读取M #
#                          PU6050 WIN\ZStack-CC2530-2.5.1a-加速度传感器\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\" -I         #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\Source\" -I      #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI25 #
#                          30DB\" -I "E:\梁宇\项目2\zigbee读取MPU6050         #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\hal\include\" -I "E:\梁宇\项目2\zigbee读取M #
#                          PU6050 WIN\ZStack-CC2530-2.5.1a-加速度传感器\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\hal\target\CC2530EB\" -I             #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\include\" -I "E:\梁宇\项目2\zigbee读取M #
#                          PU6050 WIN\ZStack-CC2530-2.5.1a-加速度传感器\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\mac\high_level\" -I                  #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\low_level\srf04\" -I                    #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\low_level\srf04\single_chip\" -I        #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mt\" -I "E:\梁宇\项目2\zigbee读取MPU6050    #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\osal\include\" -I                           #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\services\saddr\" -I                         #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\services\sdata\" -I                         #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\af\" -I "E:\梁宇\项目2\zigbee读取MPU6 #
#                          050 WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\nwk\" -I                          #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sapi\" -I "E:\梁宇\项目2\zigbee读取MP #
#                          U6050 WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sec\" -I                        #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sys\" -I "E:\梁宇\项目2\zigbee读取MPU #
#                          6050 WIN\ZStack-CC2530-2.5.1a-加速度传感器\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \Components\stack\zdo\" -I                         #
#                          "E:\梁宇\项目2\zigbee读取MPU6050                   #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\zmac\" -I "E:\梁宇\项目2\zigbee读取MPU6050  #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\zmac\f8w\" -Ohz --require_prototypes        #
#    List file          =  E:\梁宇\项目2\zigbee读取MPU6050                    #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\mm #
#                          a8451.lst                                          #
#    Object file        =  E:\梁宇\项目2\zigbee读取MPU6050                    #
#                          WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\mma #
#                          8451.r51                                           #
#                                                                             #
#                                                                             #
###############################################################################

E:\梁宇\项目2\zigbee读取MPU6050 WIN\ZStack-CC2530-2.5.1a-加速度传感器\Projects\zstack\Samples\SampleApp\Source\mma8451.c
      1          /******************************************************************************
      2           * INCLUDES
      3           */
      4          
      5          #include "ioCC2530.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd0
   \   union <unnamed> volatile __sfr _A_PSW
   \                     _A_PSW:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
      6          #include"MPU6050.h"
      7          #include "OnBoard.h"
      8          #include "hal_types.h"
      9          
     10          #define uint  unsigned int
     11          #define uchar unsigned char

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     12          int accX,accY,accZ,graX,graY,graZ;
   \                     accX:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     accY:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     accZ:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     graX:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     graY:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     graZ:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     13          
     14          
     15          
     16          
     17          
     18          void delay_usec(uchar u);
     19          void WriteSDA_0(void);
     20          void WriteSDA_1(void);
     21          void WriteSCL_0(void);
     22          void WriteSCL_1(void);
     23          void ReadSDA(void);
     24          void Init_IO(void);
     25          void I2C_Start(void);
     26          void I2C_Stop(void);
     27          void I2C_SendACK(uchar ack);
     28          uchar I2C_RecvACK(void);
     29          void I2C_SendByte(uchar data);
     30          uchar I2C_RecvByte(void);
     31          void Single_WriteI2C(uchar REG_Address,uchar REG_data);
     32          uchar Single_ReadI2C(uchar REG_Address);
     33          void InitMPU6050(void);
     34          void ALLInit(void);
     35          void Multiple_read_MPU6050(void);
     36          void type_change(int num);
     37          
     38          
     39          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     40          void ALLInit(void)
   \                     ALLInit:
     41          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     42             Init_IO();
   \   000004                ; Setup parameters for call to function Init_IO
   \   000004   12....       LCALL   ??Init_IO?relay
     43             InitMPU6050();
   \   000007                ; Setup parameters for call to function InitMPU6050
   \   000007   12....       LCALL   ??InitMPU6050?relay
     44          }
   \   00000A   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     45          
     46          
     47          /****************us延时函数 32M晶振 单周期MCU********************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     48          void delay_usec(uchar u)
   \                     delay_usec:
     49          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8020         SJMP    ??delay_usec_0
     50            while(u --)
     51            {
     52              /* 32 NOPs == 1 usecs */
     53              asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
   \                     ??delay_usec_1:
   \   000002   00           nop
   \   000003   00           nop
   \   000004   00           nop
   \   000005   00           nop
     54              asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
   \   000006   00           nop
   \   000007   00           nop
   \   000008   00           nop
   \   000009   00           nop
     55              asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
   \   00000A   00           nop
   \   00000B   00           nop
   \   00000C   00           nop
   \   00000D   00           nop
     56              asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
   \   00000E   00           nop
   \   00000F   00           nop
   \   000010   00           nop
   \   000011   00           nop
     57              asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000012   00           nop
   \   000013   00           nop
   \   000014   00           nop
   \   000015   00           nop
     58              asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
   \   000016   00           nop
   \   000017   00           nop
   \   000018   00           nop
   \   000019   00           nop
     59              asm("nop"); asm("nop"); asm("nop"); asm("nop"); 
   \   00001A   00           nop
   \   00001B   00           nop
   \   00001C   00           nop
   \   00001D   00           nop
     60              asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   00001E   00           nop
   \   00001F   00           nop
   \   000020   00           nop
   \   000021   00           nop
     61            }
   \                     ??delay_usec_0:
   \   000022   E9           MOV     A,R1
   \   000023   F8           MOV     R0,A
   \   000024   74FF         MOV     A,#-0x1
   \   000026   28           ADD     A,R0
   \   000027   19           DEC     R1
   \   000028   04           INC     A
   \   000029   70D7         JNZ     ??delay_usec_1
     62          }
   \   00002B   02....       LJMP    ?BRET
     63          
     64          /*****************************MPU6050*******************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     65          void WriteSDA_0(void) 
   \                     WriteSDA_0:
     66          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     67              P0DIR|=0x40;
   \   000000   43FD40       ORL     0xfd,#0x40
     68              SDA=0;
   \   000003   C287         CLR     0x80.7
     69          }
   \   000005   02....       LJMP    ?BRET
   \   000008                REQUIRE P0DIR
   \   000008                REQUIRE _A_P0
     70          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     71          void WriteSDA_1() 
   \                     WriteSDA_1:
     72          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     73              P0DIR|=0x40;
   \   000000   43FD40       ORL     0xfd,#0x40
     74              SDA=1;
   \   000003   D287         SETB    0x80.7
     75          }
   \   000005   02....       LJMP    ?BRET
   \   000008                REQUIRE P0DIR
   \   000008                REQUIRE _A_P0
     76              

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          void WriteSCL_0()    
   \                     WriteSCL_0:
     78          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     79              P0DIR|=0x80;
   \   000000   43FD80       ORL     0xfd,#0x80
     80              SCL=0;
   \   000003   C286         CLR     0x80.6
     81          }
   \   000005   02....       LJMP    ?BRET
   \   000008                REQUIRE P0DIR
   \   000008                REQUIRE _A_P0
     82          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     83          void WriteSCL_1()    
   \                     WriteSCL_1:
     84          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     85              P0DIR|=0x80;
   \   000000   43FD80       ORL     0xfd,#0x80
     86              SCL=1;
   \   000003   D286         SETB    0x80.6
     87          }
   \   000005   02....       LJMP    ?BRET
   \   000008                REQUIRE P0DIR
   \   000008                REQUIRE _A_P0
     88          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     89          void ReadSDA(void)//sda输入,=0
   \                     ReadSDA:
     90          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     91              P0DIR&=0xBF;
   \   000000   53FDBF       ANL     0xfd,#0xbf
     92          }
   \   000003   02....       LJMP    ?BRET
   \   000006                REQUIRE P0DIR
     93          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     94          void Init_IO(void)
   \                     Init_IO:
     95          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     96            P0DIR|=0xc0;
   \   000000   43FDC0       ORL     0xfd,#0xc0
     97            P0SEL&=0x3f;
   \   000003   53F33F       ANL     0xf3,#0x3f
     98          }
   \   000006   02....       LJMP    ?BRET
   \   000009                REQUIRE P0DIR
   \   000009                REQUIRE P0SEL
     99          
    100          
    101          //I2C起始信号

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    102          void I2C_Start()  
   \                     I2C_Start:
    103          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    104              WriteSDA_1();
   \   000004                ; Setup parameters for call to function WriteSDA_1
   \   000004   12....       LCALL   ??WriteSDA_1?relay
    105              WriteSCL_1();
   \   000007                ; Setup parameters for call to function WriteSCL_1
   \   000007   12....       LCALL   ?Subroutine3 & 0xFFFF
    106              delay_usec(50);
    107              WriteSDA_0();
   \                     ??CrossCallReturnLabel_0:
   \   00000A                ; Setup parameters for call to function WriteSDA_0
   \   00000A   12....       LCALL   ??WriteSDA_0?relay
    108              delay_usec(50);
   \   00000D                ; Setup parameters for call to function delay_usec
   \   00000D   12....       LCALL   ??Subroutine9_0 & 0xFFFF
    109              WriteSCL_0();
    110              delay_usec(50);
    111          }
   \                     ??CrossCallReturnLabel_31:
   \   000010   80..         SJMP    ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   7932         MOV     R1,#0x32
   \   000002   12....       LCALL   ??delay_usec?relay
   \   000005                ; Setup parameters for call to function WriteSCL_0
   \   000005                ; Setup parameters for call to function WriteSCL_0
   \   000005                ; Setup parameters for call to function WriteSCL_0
   \   000005                REQUIRE ??Subroutine10_0
   \   000005                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   12....       LCALL   ??WriteSCL_0?relay
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003   7932         MOV     R1,#0x32
   \   000005   12....       LCALL   ??delay_usec?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ??WriteSCL_1?relay
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003   7932         MOV     R1,#0x32
   \   000005   12....       LCALL   ??delay_usec?relay
   \   000008   22           RET
    112          
    113          
    114          //I2C停止信号

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    115          void I2C_Stop()  
   \                     I2C_Stop:
    116          {    
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    117             WriteSDA_0();
   \   000004                ; Setup parameters for call to function WriteSDA_0
   \   000004   12....       LCALL   ??WriteSDA_0?relay
    118             WriteSCL_1();
   \   000007                ; Setup parameters for call to function WriteSCL_1
   \   000007   12....       LCALL   ?Subroutine3 & 0xFFFF
    119             delay_usec(50);
    120             WriteSDA_1();
   \                     ??CrossCallReturnLabel_1:
   \   00000A                ; Setup parameters for call to function WriteSDA_1
   \   00000A   12....       LCALL   ??WriteSDA_1?relay
    121          }
   \   00000D                REQUIRE ?Subroutine0
   \   00000D                ; // Fall through to label ?Subroutine0
    122          
    123          //I2C发送应答信号
    124          //入口参数:ack (0:ACK 1:NAK)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ??WriteSCL_1?relay
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003                ; Setup parameters for call to function delay_usec
   \   000003                REQUIRE ??Subroutine9_0
   \   000003                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          void I2C_SendACK(uchar ack)
   \                     I2C_SendACK:
    126          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    127              
    128              SDA=ack;                     //写应答信号
   \   000006   A2E0         MOV     C,0xE0 /* A   */.0
   \   000008   9287         MOV     0x80.7,C
    129              WriteSCL_1();                   //拉高时钟线
   \   00000A                ; Setup parameters for call to function WriteSCL_1
   \   00000A   12....       LCALL   ?Subroutine2 & 0xFFFF
    130              delay_usec(50);//Delay5us();    //延时
    131              WriteSCL_0();                   //拉低时钟线
    132              delay_usec(50);//Delay5us();    //延时
    133          
    134          }
   \                     ??CrossCallReturnLabel_29:
   \   00000D   80..         SJMP    ??Subroutine11_0
   \   00000F                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    135          
    136          //I2C接收应答信号

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          uchar I2C_RecvACK()
   \                     I2C_RecvACK:
    138          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    139              ReadSDA();
   \   000004   53FDBF       ANL     0xfd,#0xbf
    140              WriteSCL_1();                       //拉高时钟线
   \   000007                ; Setup parameters for call to function WriteSCL_1
   \   000007   12....       LCALL   ?Subroutine3 & 0xFFFF
    141              delay_usec(50);//Delay5us();    //延时
    142              CY=SDA;                      //读应答信号
   \                     ??CrossCallReturnLabel_2:
   \   00000A   A287         MOV     C,0x80.7
   \   00000C   92D7         MOV     0xd0.7,C
    143              WriteSCL_0();                       //拉低时钟线
   \   00000E                ; Setup parameters for call to function WriteSCL_0
   \   00000E   12....       LCALL   ??Subroutine10_0 & 0xFFFF
    144              delay_usec(50);//Delay5us();    //延时
    145              P0DIR|=0x20;
   \                     ??CrossCallReturnLabel_32:
   \   000011   43FD20       ORL     0xfd,#0x20
    146              return CY;
   \   000014   A2D7         MOV     C,0xd0.7
   \   000016   E4           CLR     A
   \   000017   33           RLC     A
   \   000018   F9           MOV     R1,A
   \   000019   80..         SJMP    ?Subroutine0
   \   00001B                REQUIRE _A_PSW
   \   00001B                REQUIRE _A_P0
   \   00001B                REQUIRE P0DIR
    147          
    148          }
    149          
    150          //向I2C总线发送一个字节数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void I2C_SendByte(uchar data)
   \                     I2C_SendByte:
    152          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    153              uchar i;
    154              SDA_OUT();
   \   000007   43FD80       ORL     0xfd,#0x80
    155              
    156              for(i=0;i<8;i++)         //8位计数器
   \   00000A   7E08         MOV     R6,#0x8
    157              {       
    158                  if(data&0x80)
   \                     ??I2C_SendByte_0:
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000F   5005         JNC     ??I2C_SendByte_1
    159                  {WriteSDA_1();}
   \   000011                ; Setup parameters for call to function WriteSDA_1
   \   000011   12....       LCALL   ??WriteSDA_1?relay
   \   000014   8003         SJMP    ??I2C_SendByte_2
    160                  else 
    161                  {WriteSDA_0();}
   \                     ??I2C_SendByte_1:
   \   000016                ; Setup parameters for call to function WriteSDA_0
   \   000016   12....       LCALL   ??WriteSDA_0?relay
    162                  
    163                  data<<=1;
   \                     ??I2C_SendByte_2:
   \   000019   EF           MOV     A,R7
   \   00001A   C3           CLR     C
   \   00001B   33           RLC     A
   \   00001C   FF           MOV     R7,A
    164                  WriteSCL_1();            //拉高时钟线
   \   00001D                ; Setup parameters for call to function WriteSCL_1
   \   00001D   12....       LCALL   ?Subroutine2 & 0xFFFF
    165                  delay_usec(50);          //延时
    166                  WriteSCL_0();            //拉低时钟线
    167                  delay_usec(50);          //延时
    168              }
   \                     ??CrossCallReturnLabel_30:
   \   000020   1E           DEC     R6
   \   000021   EE           MOV     A,R6
   \   000022   70E8         JNZ     ??I2C_SendByte_0
    169              I2C_RecvACK();
   \   000024                ; Setup parameters for call to function I2C_RecvACK
   \   000024   12....       LCALL   ??I2C_RecvACK?relay
    170          }
   \   000027   80..         SJMP    ??Subroutine11_0
   \   000029                REQUIRE P0DIR
    171          
    172          
    173          //从I2C总线接收一个字节数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002                REQUIRE ??Subroutine11_0
   \   000002                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          uchar I2C_RecvByte()
   \                     I2C_RecvByte:
    175          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    176              uchar i;  
    177              uchar data=0;
   \   000005   7E00         MOV     R6,#0x0
    178              
    179              WriteSDA_1();                 //使能内部上拉,准备读取数据
   \   000007                ; Setup parameters for call to function WriteSDA_1
   \   000007   12....       LCALL   ??WriteSDA_1?relay
    180              
    181              for(i=0;i<8;i++)
   \   00000A   7F08         MOV     R7,#0x8
    182             {
    183              WriteSCL_0();
   \                     ??I2C_RecvByte_0:
   \   00000C                ; Setup parameters for call to function WriteSCL_0
   \   00000C   12....       LCALL   ??Subroutine10_0 & 0xFFFF
    184              delay_usec(50);
    185              WriteSCL_1();
   \                     ??CrossCallReturnLabel_33:
   \   00000F                ; Setup parameters for call to function WriteSCL_1
   \   00000F   12....       LCALL   ?Subroutine3 & 0xFFFF
    186              delay_usec(50);
    187              
    188              ReadSDA();
   \                     ??CrossCallReturnLabel_3:
   \   000012   53FDBF       ANL     0xfd,#0xbf
    189              CY=SDA;
   \   000015   A287         MOV     C,0x80.7
   \   000017   92D7         MOV     0xd0.7,C
    190              
    191              if(CY)
   \   000019   A2D7         MOV     C,0xd0.7
   \   00001B   EE           MOV     A,R6
   \   00001C   5006         JNC     ??I2C_RecvByte_1
    192              {
    193                data=data << 1;
    194                data=data|0x01;
   \   00001E   C3           CLR     C
   \   00001F   33           RLC     A
   \   000020   4401         ORL     A,#0x1
   \   000022   8002         SJMP    ??I2C_RecvByte_2
    195              }
    196              else
    197                data=data<<1;
   \                     ??I2C_RecvByte_1:
   \   000024   C3           CLR     C
   \   000025   33           RLC     A
   \                     ??I2C_RecvByte_2:
   \   000026   FE           MOV     R6,A
    198            }
   \   000027   1F           DEC     R7
   \   000028   EF           MOV     A,R7
   \   000029   70E1         JNZ     ??I2C_RecvByte_0
    199            WriteSCL_0();
   \   00002B                ; Setup parameters for call to function WriteSCL_0
   \   00002B   12....       LCALL   ??WriteSCL_0?relay
    200            SDA_OUT(); 
   \   00002E   43FD80       ORL     0xfd,#0x80
    201            return data;
   \   000031   80..         SJMP    ?Subroutine1
   \   000033                REQUIRE _A_PSW
   \   000033                REQUIRE _A_P0
   \   000033                REQUIRE P0DIR
    202            
    203            
    204            
    205          }
    206          
    207          //向I2C设备写入一个字节数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    208          void Single_WriteI2C(uchar REG_Address,uchar REG_data)
   \                     Single_WriteI2C:
    209          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    210              I2C_Start();                  //起始信号
   \   000009                ; Setup parameters for call to function I2C_Start
   \   000009   12....       LCALL   ?Subroutine4 & 0xFFFF
    211              I2C_SendByte(SlaveAddress);   //发送设备地址+写信号
    212              I2C_SendByte(REG_Address);    //内部寄存器地址，
    213              I2C_SendByte(REG_data);       //内部寄存器数据，
   \                     ??CrossCallReturnLabel_4:
   \   00000C                ; Setup parameters for call to function I2C_SendByte
   \   00000C   EE           MOV     A,R6
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   ??I2C_SendByte?relay
    214              I2C_Stop();                   //发送停止信号
   \   000011                ; Setup parameters for call to function I2C_Stop
   \   000011   12....       LCALL   ??I2C_Stop?relay
    215          
    216          }
   \   000014   80..         SJMP    ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ??I2C_Start?relay
   \   000003                ; Setup parameters for call to function I2C_SendByte
   \   000003                ; Setup parameters for call to function I2C_SendByte
   \   000003   79D0         MOV     R1,#-0x30
   \   000005   12....       LCALL   ??I2C_SendByte?relay
   \   000008                ; Setup parameters for call to function I2C_SendByte
   \   000008                ; Setup parameters for call to function I2C_SendByte
   \   000008   EF           MOV     A,R7
   \   000009   F9           MOV     R1,A
   \   00000A   12....       LCALL   ??I2C_SendByte?relay
   \   00000D   22           RET
    217          
    218          //从I2C设备读取一个字节数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    219          uchar Single_ReadI2C(uchar REG_Address)
   \                     Single_ReadI2C:
    220          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    221          	uchar REG_data;
    222          	I2C_Start();                   //起始信号
   \   000007                ; Setup parameters for call to function I2C_Start
   \   000007   12....       LCALL   ?Subroutine4 & 0xFFFF
    223          	I2C_SendByte(SlaveAddress);    //发送设备地址+写信号
    224          	I2C_SendByte(REG_Address);     //发送存储单元地址，从0开始	
    225          	I2C_Start();                   //起始信号
   \                     ??CrossCallReturnLabel_5:
   \   00000A                ; Setup parameters for call to function I2C_Start
   \   00000A   12....       LCALL   ??I2C_Start?relay
    226          	I2C_SendByte(SlaveAddress+1);  //发送设备地址+读信号
   \   00000D                ; Setup parameters for call to function I2C_SendByte
   \   00000D   79D1         MOV     R1,#-0x2f
   \   00000F   12....       LCALL   ??I2C_SendByte?relay
    227          	REG_data=I2C_RecvByte();       //读出寄存器数据
   \   000012                ; Setup parameters for call to function I2C_RecvByte
   \   000012   12....       LCALL   ??I2C_RecvByte?relay
   \   000015   E9           MOV     A,R1
   \   000016   FE           MOV     R6,A
    228          	I2C_SendACK(1);                //接收应答信号
   \   000017                ; Setup parameters for call to function I2C_SendACK
   \   000017   7901         MOV     R1,#0x1
   \   000019   12....       LCALL   ??I2C_SendACK?relay
    229          	I2C_Stop();                    //停止信号
   \   00001C                ; Setup parameters for call to function I2C_Stop
   \   00001C   12....       LCALL   ??I2C_Stop?relay
    230          	return REG_data;
   \   00001F   80..         SJMP    ?Subroutine1
    231          }
    232          
    233          //初始化MPU6050

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          void InitMPU6050()
   \                     InitMPU6050:
    235          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    236          	Single_WriteI2C(PWR_MGMT_1,0x00);	//解除休眠状态
   \   000004                ; Setup parameters for call to function Single_WriteI2C
   \   000004   7A00         MOV     R2,#0x0
   \   000006   796B         MOV     R1,#0x6b
   \   000008   12....       LCALL   ??Single_WriteI2C?relay
    237          	Single_WriteI2C(SMPLRT_DIV,0x07);
   \   00000B                ; Setup parameters for call to function Single_WriteI2C
   \   00000B   7A07         MOV     R2,#0x7
   \   00000D   7919         MOV     R1,#0x19
   \   00000F   12....       LCALL   ??Single_WriteI2C?relay
    238          	Single_WriteI2C(CONFIG,0x06);
   \   000012                ; Setup parameters for call to function Single_WriteI2C
   \   000012   7A06         MOV     R2,#0x6
   \   000014   791A         MOV     R1,#0x1a
   \   000016   12....       LCALL   ??Single_WriteI2C?relay
    239          	Single_WriteI2C(GYRO_CONFIG,0x18);
   \   000019                ; Setup parameters for call to function Single_WriteI2C
   \   000019   7A18         MOV     R2,#0x18
   \   00001B   791B         MOV     R1,#0x1b
   \   00001D   12....       LCALL   ??Single_WriteI2C?relay
    240          	Single_WriteI2C(ACCEL_CONFIG,0x01);
   \   000020                ; Setup parameters for call to function Single_WriteI2C
   \   000020   7A01         MOV     R2,#0x1
   \   000022   791C         MOV     R1,#0x1c
   \   000024   12....       LCALL   ??Single_WriteI2C?relay
    241          }
   \   000027   02....       LJMP    ?Subroutine0 & 0xFFFF
    242          
    243          //*********************************************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          void Multiple_read_MPU6050(void)
   \                     Multiple_read_MPU6050:
    245          {   
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    246            char BUF[12]; //接收数据缓存区  
    247            BUF[0]=Single_ReadI2C(ACCEL_XOUT_H);
   \   00000A                ; Setup parameters for call to function Single_ReadI2C
   \   00000A   793B         MOV     R1,#0x3b
   \   00000C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    248            BUF[1]=Single_ReadI2C(ACCEL_XOUT_L);
   \   000016                ; Setup parameters for call to function Single_ReadI2C
   \   000016   793C         MOV     R1,#0x3c
   \   000018   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00001B   F5..         MOV     ?V0 + 4,A
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E9           MOV     A,R1
   \   000023   F0           MOVX    @DPTR,A
    249            BUF[2]=Single_ReadI2C(ACCEL_YOUT_H);
   \   000024                ; Setup parameters for call to function Single_ReadI2C
   \   000024   793D         MOV     R1,#0x3d
   \   000026   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E9           MOV     A,R1
   \   000031   F0           MOVX    @DPTR,A
    250            BUF[3]=Single_ReadI2C(ACCEL_YOUT_L);
   \   000032                ; Setup parameters for call to function Single_ReadI2C
   \   000032   793E         MOV     R1,#0x3e
   \   000034   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000037   F5..         MOV     ?V0 + 3,A
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E9           MOV     A,R1
   \   00003F   F0           MOVX    @DPTR,A
    251            BUF[4]=Single_ReadI2C(ACCEL_ZOUT_H);
   \   000040                ; Setup parameters for call to function Single_ReadI2C
   \   000040   793F         MOV     R1,#0x3f
   \   000042   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000045   F5..         MOV     ?V0 + 1,A
   \   000047   7404         MOV     A,#0x4
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
    252            BUF[5]=Single_ReadI2C(ACCEL_ZOUT_L);
   \   00004E                ; Setup parameters for call to function Single_ReadI2C
   \   00004E   7940         MOV     R1,#0x40
   \   000050   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000053   F5..         MOV     ?V0 + 10,A
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E9           MOV     A,R1
   \   00005B   F0           MOVX    @DPTR,A
    253            
    254            BUF[6]=Single_ReadI2C(GYRO_XOUT_H);
   \   00005C                ; Setup parameters for call to function Single_ReadI2C
   \   00005C   7943         MOV     R1,#0x43
   \   00005E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000061   F5..         MOV     ?V0 + 0,A
   \   000063   7406         MOV     A,#0x6
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E9           MOV     A,R1
   \   000069   F0           MOVX    @DPTR,A
    255            BUF[7]=Single_ReadI2C(GYRO_XOUT_L);
   \   00006A                ; Setup parameters for call to function Single_ReadI2C
   \   00006A   7944         MOV     R1,#0x44
   \   00006C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00006F   F5..         MOV     ?V0 + 8,A
   \   000071   7407         MOV     A,#0x7
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E9           MOV     A,R1
   \   000077   F0           MOVX    @DPTR,A
    256            BUF[8]=Single_ReadI2C(GYRO_YOUT_H);
   \   000078                ; Setup parameters for call to function Single_ReadI2C
   \   000078   7945         MOV     R1,#0x45
   \   00007A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00007D   FF           MOV     R7,A
   \   00007E   7408         MOV     A,#0x8
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   E9           MOV     A,R1
   \   000084   F0           MOVX    @DPTR,A
    257            BUF[9]=Single_ReadI2C(GYRO_YOUT_L);
   \   000085                ; Setup parameters for call to function Single_ReadI2C
   \   000085   7946         MOV     R1,#0x46
   \   000087   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00008A   F5..         MOV     ?V0 + 6,A
   \   00008C   7409         MOV     A,#0x9
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   E9           MOV     A,R1
   \   000092   F0           MOVX    @DPTR,A
    258            BUF[10]=Single_ReadI2C(GYRO_ZOUT_H);
   \   000093                ; Setup parameters for call to function Single_ReadI2C
   \   000093   7947         MOV     R1,#0x47
   \   000095   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000098   FE           MOV     R6,A
   \   000099   740A         MOV     A,#0xa
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   E9           MOV     A,R1
   \   00009F   F0           MOVX    @DPTR,A
    259            BUF[11]=Single_ReadI2C(GYRO_ZOUT_L);
   \   0000A0                ; Setup parameters for call to function Single_ReadI2C
   \   0000A0   7948         MOV     R1,#0x48
   \   0000A2   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000A5   F5..         MOV     ?V0 + 12,A
   \   0000A7   740B         MOV     A,#0xb
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E9           MOV     A,R1
   \   0000AD   F0           MOVX    @DPTR,A
    260            
    261            accX=(BUF[0]<<8)|BUF[1]; 
   \   0000AE   85..82       MOV     DPL,?XSP + 0
   \   0000B1   85..83       MOV     DPH,?XSP + 1
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F9           MOV     R1,A
   \   0000B6   E5..         MOV     A,?V0 + 4
   \   0000B8   90....       MOV     DPTR,#accX
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E9           MOV     A,R1
   \   0000BE   F0           MOVX    @DPTR,A
    262            accY=(BUF[2]<<8)|BUF[3]; 
   \   0000BF   A9..         MOV     R1,?V0 + 2
   \   0000C1   85....       MOV     ?V0 + 2,?V0 + 3
   \   0000C4   E5..         MOV     A,?V0 + 2
   \   0000C6   90....       MOV     DPTR,#accY
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E9           MOV     A,R1
   \   0000CC   F0           MOVX    @DPTR,A
    263            accZ=(BUF[4]<<8)|BUF[5]; 
   \   0000CD   E5..         MOV     A,?V0 + 10
   \   0000CF   90....       MOV     DPTR,#accZ
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E5..         MOV     A,?V0 + 1
   \   0000D6   F0           MOVX    @DPTR,A
    264            graX=(BUF[6]<<8)|BUF[7];
   \   0000D7   E5..         MOV     A,?V0 + 8
   \   0000D9   90....       MOV     DPTR,#graX
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E5..         MOV     A,?V0 + 0
   \   0000E0   F0           MOVX    @DPTR,A
    265            graY=(BUF[8]<<8)|BUF[9];
   \   0000E1   EF           MOV     A,R7
   \   0000E2   F9           MOV     R1,A
   \   0000E3   E5..         MOV     A,?V0 + 6
   \   0000E5   90....       MOV     DPTR,#graY
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E9           MOV     A,R1
   \   0000EB   F0           MOVX    @DPTR,A
    266            graZ=(BUF[10]<<8)|BUF[11];
   \   0000EC   EE           MOV     A,R6
   \   0000ED   F9           MOV     R1,A
   \   0000EE   E5..         MOV     A,?V0 + 12
   \   0000F0   90....       MOV     DPTR,#graZ
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E9           MOV     A,R1
   \   0000F6   F0           MOVX    @DPTR,A
    267             
    268            type_change(accX);
   \   0000F7                ; Setup parameters for call to function type_change
   \   0000F7   90....       MOV     DPTR,#accX
   \   0000FA   12....       LCALL   ?Subroutine7 & 0xFFFF
    269            HalUARTWrite(0,"  ",2);
    270            type_change(accY);
   \                     ??CrossCallReturnLabel_22:
   \   0000FD                ; Setup parameters for call to function type_change
   \   0000FD   90....       MOV     DPTR,#accY
   \   000100   12....       LCALL   ?Subroutine7 & 0xFFFF
    271            HalUARTWrite(0,"  ",2);
    272            type_change(accZ);
   \                     ??CrossCallReturnLabel_23:
   \   000103                ; Setup parameters for call to function type_change
   \   000103   90....       MOV     DPTR,#accZ
   \   000106   12....       LCALL   ?Subroutine7 & 0xFFFF
    273            HalUARTWrite(0,"  ",2);
    274          
    275            type_change(graX);
   \                     ??CrossCallReturnLabel_24:
   \   000109                ; Setup parameters for call to function type_change
   \   000109   90....       MOV     DPTR,#graX
   \   00010C   12....       LCALL   ?Subroutine7 & 0xFFFF
    276            HalUARTWrite(0,"  ",2);
    277            type_change(graY);
   \                     ??CrossCallReturnLabel_25:
   \   00010F                ; Setup parameters for call to function type_change
   \   00010F   90....       MOV     DPTR,#graY
   \   000112   12....       LCALL   ?Subroutine7 & 0xFFFF
    278            HalUARTWrite(0,"  ",2);
    279            type_change(graZ);
   \                     ??CrossCallReturnLabel_26:
   \   000115                ; Setup parameters for call to function type_change
   \   000115   90....       MOV     DPTR,#graZ
   \   000118   12....       LCALL   ?Subroutine8 & 0xFFFF
    280            HalUARTWrite(0,"\n",1);
   \                     ??CrossCallReturnLabel_27:
   \   00011B                ; Setup parameters for call to function HalUARTWrite
   \   00011B   7C01         MOV     R4,#0x1
   \   00011D   7D00         MOV     R5,#0x0
   \   00011F   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000121   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000123   7900         MOV     R1,#0x0
   \   000125   12....       LCALL   ??HalUARTWrite?relay
    281          }
   \   000128   740C         MOV     A,#0xc
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012D   7F0E         MOV     R7,#0xe
   \   00012F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003   7C02         MOV     R4,#0x2
   \   000005   7D00         MOV     R5,#0x0
   \   000007   7A..         MOV     R2,#`?<Constant "  ">` & 0xff
   \   000009   7B..         MOV     R3,#(`?<Constant "  ">` >> 8) & 0xff
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   ??HalUARTWrite?relay
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??type_change?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ??Single_ReadI2C?relay
   \   000003   E9           MOV     A,R1
   \   000004   22           RET
    282          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void type_change(int num)
   \                     type_change:
    284          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    285            uint8 temp[5];
    286            if(num<0)
   \   00000E   C3           CLR     C
   \   00000F   9400         SUBB    A,#0x0
   \   000011   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000013   65D0         XRL     A,PSW
   \   000015   33           RLC     A
   \   000016   7C01         MOV     R4,#0x1
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   5016         JNC     ??type_change_0
    287            {
    288              HalUARTWrite(0,"-",1);
   \   00001C                ; Setup parameters for call to function HalUARTWrite
   \   00001C   7A..         MOV     R2,#`?<Constant "-">` & 0xff
   \   00001E   7B..         MOV     R3,#(`?<Constant "-">` >> 8) & 0xff
   \   000020   7900         MOV     R1,#0x0
   \   000022   12....       LCALL   ??HalUARTWrite?relay
    289              num = -num;
   \   000025   C3           CLR     C
   \   000026   E4           CLR     A
   \   000027   9E           SUBB    A,R6
   \   000028   F8           MOV     R0,A
   \   000029   E4           CLR     A
   \   00002A   9F           SUBB    A,R7
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   FE           MOV     R6,A
   \   00002E   E9           MOV     A,R1
   \   00002F   FF           MOV     R7,A
   \   000030   8009         SJMP    ??type_change_1
    290            }
    291            else
    292            {
    293              HalUARTWrite(0,"+",1);
   \                     ??type_change_0:
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   7A..         MOV     R2,#`?<Constant "+">` & 0xff
   \   000034   7B..         MOV     R3,#(`?<Constant "+">` >> 8) & 0xff
   \   000036   7900         MOV     R1,#0x0
   \   000038   12....       LCALL   ??HalUARTWrite?relay
    294            }
    295            temp[0] = num/10000+0x30;
   \                     ??type_change_1:
   \   00003B   EE           MOV     A,R6
   \   00003C   F8           MOV     R0,A
   \   00003D   EF           MOV     A,R7
   \   00003E   F9           MOV     R1,A
   \   00003F   7A10         MOV     R2,#0x10
   \   000041   7B27         MOV     R3,#0x27
   \   000043   12....       LCALL   ?S_DIV_MOD
   \   000046   E8           MOV     A,R0
   \   000047   2430         ADD     A,#0x30
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   12....       LCALL   ?Subroutine6 & 0xFFFF
    296            temp[1] = num%10000/1000+0x30;
   \                     ??CrossCallReturnLabel_18:
   \   000052   7A10         MOV     R2,#0x10
   \   000054   7B27         MOV     R3,#0x27
   \   000056   12....       LCALL   ?S_DIV_MOD
   \   000059   EA           MOV     A,R2
   \   00005A   F8           MOV     R0,A
   \   00005B   EB           MOV     A,R3
   \   00005C   F9           MOV     R1,A
   \   00005D   7AE8         MOV     R2,#-0x18
   \   00005F   7B03         MOV     R3,#0x3
   \   000061   12....       LCALL   ?S_DIV_MOD
   \   000064   E8           MOV     A,R0
   \   000065   2430         ADD     A,#0x30
   \   000067   C0E0         PUSH    A
   \   000069   7401         MOV     A,#0x1
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   D0E0         POP     A
   \   000070   12....       LCALL   ?Subroutine6 & 0xFFFF
    297            temp[2] = num%1000/100+0x30;
   \                     ??CrossCallReturnLabel_19:
   \   000073   7AE8         MOV     R2,#-0x18
   \   000075   7B03         MOV     R3,#0x3
   \   000077   12....       LCALL   ?S_DIV_MOD
   \   00007A   EA           MOV     A,R2
   \   00007B   F8           MOV     R0,A
   \   00007C   EB           MOV     A,R3
   \   00007D   F9           MOV     R1,A
   \   00007E   7A64         MOV     R2,#0x64
   \   000080   7B00         MOV     R3,#0x0
   \   000082   12....       LCALL   ?S_DIV_MOD
   \   000085   E8           MOV     A,R0
   \   000086   2430         ADD     A,#0x30
   \   000088   C0E0         PUSH    A
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   D0E0         POP     A
   \   000091   12....       LCALL   ?Subroutine6 & 0xFFFF
    298            temp[3] = num%100/10+0x30;
   \                     ??CrossCallReturnLabel_20:
   \   000094   7A64         MOV     R2,#0x64
   \   000096   7B00         MOV     R3,#0x0
   \   000098   12....       LCALL   ?S_DIV_MOD
   \   00009B   EA           MOV     A,R2
   \   00009C   F8           MOV     R0,A
   \   00009D   EB           MOV     A,R3
   \   00009E   F9           MOV     R1,A
   \   00009F   7A0A         MOV     R2,#0xa
   \   0000A1   7B00         MOV     R3,#0x0
   \   0000A3   12....       LCALL   ?S_DIV_MOD
   \   0000A6   E8           MOV     A,R0
   \   0000A7   2430         ADD     A,#0x30
   \   0000A9   C0E0         PUSH    A
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   D0E0         POP     A
   \   0000B2   12....       LCALL   ?Subroutine6 & 0xFFFF
    299            temp[4] = num%10+0x30;
   \                     ??CrossCallReturnLabel_21:
   \   0000B5   7A0A         MOV     R2,#0xa
   \   0000B7   7B00         MOV     R3,#0x0
   \   0000B9   12....       LCALL   ?S_DIV_MOD
   \   0000BC   EA           MOV     A,R2
   \   0000BD   2430         ADD     A,#0x30
   \   0000BF   C0E0         PUSH    A
   \   0000C1   7404         MOV     A,#0x4
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   D0E0         POP     A
   \   0000C8   F0           MOVX    @DPTR,A
    300            HalUARTWrite(0,&temp[0],5);
   \   0000C9                ; Setup parameters for call to function HalUARTWrite
   \   0000C9   7C05         MOV     R4,#0x5
   \   0000CB   7D00         MOV     R5,#0x0
   \   0000CD   85..82       MOV     DPL,?XSP + 0
   \   0000D0   85..83       MOV     DPH,?XSP + 1
   \   0000D3   AA82         MOV     R2,DPL
   \   0000D5   AB83         MOV     R3,DPH
   \   0000D7   7900         MOV     R1,#0x0
   \   0000D9   12....       LCALL   ??HalUARTWrite?relay
    301          }
   \   0000DC   7405         MOV     A,#0x5
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E1   02....       LJMP    ??Subroutine11_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   F8           MOV     R0,A
   \   000003   EF           MOV     A,R7
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ALLInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ALLInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay_usec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay_usec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WriteSDA_0?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WriteSDA_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WriteSDA_1?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WriteSDA_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WriteSCL_0?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WriteSCL_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WriteSCL_1?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WriteSCL_1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadSDA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadSDA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Init_IO?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Init_IO

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_Start?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_Start

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_Stop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_Stop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_SendACK?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_SendACK

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_RecvACK?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_RecvACK

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_SendByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_SendByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??I2C_RecvByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    I2C_RecvByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Single_WriteI2C?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Single_WriteI2C

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Single_ReadI2C?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Single_ReadI2C

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitMPU6050?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitMPU6050

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Multiple_read_MPU6050?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Multiple_read_MPU6050

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??type_change?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    type_change

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  ">`:
   \   000000   202000       DB "  "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "-">`:
   \   000000   2D00         DB "-"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+">`:
   \   000000   2B00         DB "+"
    302          

   Maximum stack usage in bytes:

     Function              ISTACK PSTACK XSTACK
     --------              ------ ------ ------
     ALLInit                   2      0      0
       -> Init_IO              4      0      0
       -> InitMPU6050          4      0      0
     I2C_RecvACK               2      0      9
       -> WriteSCL_1           4      0      0
       -> delay_usec           4      0      0
       -> WriteSCL_0           4      0      0
       -> delay_usec           4      0      0
     I2C_RecvByte              0      0     18
       -> WriteSDA_1           0      0     18
       -> WriteSCL_0           0      0     18
       -> delay_usec           0      0     18
       -> WriteSCL_1           0      0     18
       -> delay_usec           0      0     18
       -> WriteSCL_0           0      0     18
     I2C_SendACK               0      0     18
       -> WriteSCL_1           0      0     18
       -> delay_usec           0      0     18
       -> WriteSCL_0           0      0     18
       -> delay_usec           0      0     18
     I2C_SendByte              0      0     18
       -> WriteSDA_1           0      0     18
       -> WriteSDA_0           0      0     18
       -> WriteSCL_1           0      0     18
       -> delay_usec           0      0     18
       -> WriteSCL_0           0      0     18
       -> delay_usec           0      0     18
       -> I2C_RecvACK          0      0     18
     I2C_Start                 2      0      9
       -> WriteSDA_1           4      0      0
       -> WriteSCL_1           4      0      0
       -> delay_usec           4      0      0
       -> WriteSDA_0           4      0      0
       -> delay_usec           4      0      0
       -> WriteSCL_0           4      0      0
       -> delay_usec           4      0      0
     I2C_Stop                  2      0      9
       -> WriteSDA_0           4      0      0
       -> WriteSCL_1           4      0      0
       -> delay_usec           4      0      0
       -> WriteSDA_1           4      0      0
     InitMPU6050               2      0      0
       -> Single_WriteI2C      4      0      0
       -> Single_WriteI2C      4      0      0
       -> Single_WriteI2C      4      0      0
       -> Single_WriteI2C      4      0      0
       -> Single_WriteI2C      4      0      0
     Init_IO                   0      0      0
     Multiple_read_MPU6050     1      0     34
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> Single_ReadI2C       0      0     68
       -> type_change          0      0     68
       -> HalUARTWrite         0      0     68
       -> type_change          0      0     68
       -> HalUARTWrite         0      0     68
       -> type_change          0      0     68
       -> HalUARTWrite         0      0     68
       -> type_change          0      0     68
       -> HalUARTWrite         0      0     68
       -> type_change          0      0     68
       -> HalUARTWrite         0      0     68
       -> type_change          0      0     68
       -> HalUARTWrite         0      0     68
     ReadSDA                   0      0      0
     Single_ReadI2C            0      0     43
       -> I2C_Start            0      0     18
       -> I2C_SendByte         0      0     18
       -> I2C_SendByte         0      0     18
       -> I2C_Start            0      0     18
       -> I2C_SendByte         0      0     18
       -> I2C_RecvByte         0      0     18
       -> I2C_SendACK          0      0     18
       -> I2C_Stop             0      0     18
     Single_WriteI2C           0      0      9
       -> I2C_Start            0      0     18
       -> I2C_SendByte         0      0     18
       -> I2C_SendByte         0      0     18
       -> I2C_SendByte         0      0     18
       -> I2C_Stop             0      0     18
     WriteSCL_0                0      0      9
     WriteSCL_1                0      0      9
     WriteSDA_0                0      0      9
     WriteSDA_1                0      0      9
     delay_usec                0      0      9
     type_change               1      0     48
       -> HalUARTWrite         0      0     28
       -> HalUARTWrite         0      0     28
       -> HalUARTWrite         0      0     28


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     _A_P0                            1
     _A_PSW                           1
     P0SEL                            1
     P0DIR                            1
     accX                             2
     accY                             2
     accZ                             2
     graX                             2
     graY                             2
     graZ                             2
     ALLInit                         13
     ?Subroutine0                     7
     delay_usec                      46
     WriteSDA_0                       8
     WriteSDA_1                       8
     WriteSCL_0                       8
     WriteSCL_1                       8
     ReadSDA                          6
     Init_IO                          9
     I2C_Start                       18
     ??Subroutine9_0                  5
     ??Subroutine10_0                 9
     ?Subroutine3                     9
     I2C_Stop                        13
     ?Subroutine2                     3
     I2C_SendACK                     15
     ??Subroutine11_0                 5
     I2C_RecvACK                     27
     I2C_SendByte                    41
     ?Subroutine1                     2
     I2C_RecvByte                    51
     Single_WriteI2C                 22
     ?Subroutine4                    14
     Single_ReadI2C                  33
     InitMPU6050                     42
     Multiple_read_MPU6050          306
     ?Subroutine7                    17
     ?Subroutine8                     9
     ?Subroutine5                     5
     type_change                    228
     ?Subroutine6                     6
     ??ALLInit?relay                  6
     ??delay_usec?relay               6
     ??WriteSDA_0?relay               6
     ??WriteSDA_1?relay               6
     ??WriteSCL_0?relay               6
     ??WriteSCL_1?relay               6
     ??ReadSDA?relay                  6
     ??Init_IO?relay                  6
     ??I2C_Start?relay                6
     ??I2C_Stop?relay                 6
     ??I2C_SendACK?relay              6
     ??I2C_RecvACK?relay              6
     ??I2C_SendByte?relay             6
     ??I2C_RecvByte?relay             6
     ??Single_WriteI2C?relay          6
     ??Single_ReadI2C?relay           6
     ??InitMPU6050?relay              6
     ??Multiple_read_MPU6050?relay    6
     ??type_change?relay              6
     ?<Constant "  ">                 3
     ?<Constant "\n">                 2
     ?<Constant "-">                  2
     ?<Constant "+">                  2

 
 993 bytes in segment BANKED_CODE
 114 bytes in segment BANK_RELAYS
   4 bytes in segment SFR_AN
   9 bytes in segment XDATA_ROM_C
  12 bytes in segment XDATA_Z
 
 1 107 bytes of CODE  memory
     9 bytes of CONST memory
     0 bytes of DATA  memory (+ 4 bytes shared)
    12 bytes of XDATA memory

Errors: none
Warnings: none
