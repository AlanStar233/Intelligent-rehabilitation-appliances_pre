###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         07/Apr/2019  18:55:35 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDevice.c         #
#    Command line       =  -f C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee #
#                          ∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wEndev.cfg (-DCPU32MHZ                   #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0         #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xF000                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\95612\Desktop\zigb #
#                          ee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5. #
#                          1a-MPU6050\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\EndDevice.c -D NWK_AUTO_POLL -D ZTOOL_P1 -D    #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\95612\Desktop\zig #
#                          bee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5 #
#                          .1a-MPU6050\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\EndDeviceEB\List\ -lA                         #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\   #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\    #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\95612\Desktop\zig #
#                          bee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5 #
#                          .1a-MPU6050\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\ -I C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\ #
#                          zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\Source\ #
#                           -I C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbe #
#                          e∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\ #
#                          TI2530DB\ -I C:\Users\95612\Desktop\zigbee∂¡»°MPU6 #
#                          050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050 #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\hal\include\ -I                #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\hal\target\CC2530EB\ -I                     #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\include\ -I C:\Users\95612\Desktop\zigb #
#                          ee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5. #
#                          1a-MPU6050\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\high_level\ -I   #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\low_level\srf04\ -I                     #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\low_level\srf04\single_chip\ -I         #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mt\ -I C:\Users\95612\Desktop\zigbee∂¡»°MPU #
#                          6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU605 #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\osal\include\ -I              #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\services\saddr\ -I                          #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\services\sdata\ -I                          #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\af\ -I C:\Users\95612\Desktop\zigbee∂ #
#                          ¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a- #
#                          MPU6050\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\stack\nwk\ -I           #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sapi\ -I C:\Users\95612\Desktop\zigbe #
#                          e∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1 #
#                          a-MPU6050\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\Components\stack\sec\ -I         #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sys\ -I C:\Users\95612\Desktop\zigbee #
#                          ∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a #
#                          -MPU6050\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\stack\zdo\ -I          #
#                          C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\zmac\ -I C:\Users\95612\Desktop\zigbee∂¡»°M #
#                          PU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6 #
#                          050\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\Components\zmac\f8w\ -Ohz              #
#                          --require_prototypes                               #
#    List file          =  C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\En #
#                          dDevice.lst                                        #
#    Object file        =  C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡» #
#                          °MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\End #
#                          Device.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\95612\Desktop\zigbee∂¡»°MPU6050\zigbee∂¡»°MPU6050\ZStack-CC2530-2.5.1a-MPU6050\Projects\zstack\Samples\SampleApp\CC2530DB\EndDevice.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          #include "SampleApp.h"
     65          #include "SampleAppHw.h"
     66          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     67          
     68          /* HAL */
     69          #include "hal_lcd.h"
     70          #include "hal_led.h"
     71          #include "hal_key.h"
     72          #include "MT_UART.h"
     73          #include"MPU6050.h"
     74          
     75          /*********************************************************************
     76           * MACROS
     77           */
     78          
     79          /*********************************************************************
     80           * CONSTANTS
     81           */
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          
     87          /*********************************************************************
     88           * GLOBAL VARIABLES
     89           */
     90          
     91          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     92          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     93          {
     94            SAMPLEAPP_PERIODIC_CLUSTERID,
     95            SAMPLEAPP_FLASH_CLUSTERID
     96          };
     97          

   \                                 In  segment XDATA_ROM_C, align 1
     98          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     99          {
    100            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    101            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    102            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    103            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    104            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    105            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    106            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    107            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    108            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    109          };
    110          // This is the Endpoint/Interface description.  It is defined here, but
    111          // filled-in in SampleApp_Init().  Another way to go would be to fill
    112          // in the structure here and make it a "const" (in code space).  The
    113          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    115          
    116          /*********************************************************************
    117           * EXTERNAL VARIABLES
    118           */
    119          
    120          /*********************************************************************
    121           * EXTERNAL FUNCTIONS
    122           */
    123          
    124          /*********************************************************************
    125           * LOCAL VARIABLES
    126           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128                                    // This variable will be received when
    129                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    131          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          afAddrType_t Point_To_Point_DstAddr;//µ„∂‘µ„Õ®–≈∂®“Â
   \                     Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          
    143          /*********************************************************************
    144           * LOCAL FUNCTIONS
    145           */
    146          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    147          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    148          void SampleApp_SendPeriodicMessage( void );
    149          void SampleApp_SendPointToPointMessage( void );
    150          void SampleApp_SendFlashMessage( uint16 flashTime );
    151          void Multiple_read_MPU6050(void);
    152          void ALLInit(void);
    153          void type_change(int num);

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint8 temp[6];
   \                     temp:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    155          
    156          /*********************************************************************
    157           * NETWORK LAYER CALLBACKS
    158           */
    159          
    160          /*********************************************************************
    161           * PUBLIC FUNCTIONS
    162           */
    163          
    164          /*********************************************************************
    165           * @fn      SampleApp_Init
    166           *
    167           * @brief   Initialization function for the Generic App Task.
    168           *          This is called during initialization and should contain
    169           *          any application specific initialization (ie. hardware
    170           *          initialization/setup, table initialization, power up
    171           *          notificaiton ... ).
    172           *
    173           * @param   task_id - the ID assigned by OSAL.  This ID should be
    174           *                    used to send messages and set timers.
    175           *
    176           * @return  none
    177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    179          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    180            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    181            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    182            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    183            
    184            /*****¥Æø⁄≥ı ºªØ*********/
    185            MT_UartInit ();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    186            MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    187            ALLInit();
   \   00001E                ; Setup parameters for call to function ALLInit
   \   00001E   12....       LCALL   ??ALLInit?relay
    188            // Device hardware initialization can be added here or in main() (Zmain.c).
    189            // If the hardware is application specific - add it here.
    190            // If the hardware is other parts of the device add it in main().
    191          
    192           #if defined ( BUILD_ALL_DEVICES )
    193            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    194            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    195            // together - if they are - we will start up a coordinator. Otherwise,
    196            // the device will start as a router.
    197            if ( readCoordinatorJumper() )
    198              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    199            else
    200              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    201          #endif // BUILD_ALL_DEVICES
    202          
    203          #if defined ( HOLD_AUTO_START )
    204            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    205            //  from starting the device and wait for the application to
    206            //  start the device.
    207            ZDOInitDevice(0);
    208          #endif
    209          
    210            // Setup for the periodic message's destination address
    211            // Broadcast to everyone
    212            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    213            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    214            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    215          
    216            // Setup for the flash command's destination address - Group 1
    217            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000033   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    218            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    219            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    220            
    221            // µ„∂‘µ„Õ®—∂∂®“Â
    222            Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//µ„≤•
   \   000046   90....       MOV     DPTR,#Point_To_Point_DstAddr + 8
   \   000049   7402         MOV     A,#0x2
   \   00004B   F0           MOVX    @DPTR,A
    223            Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00004C   A3           INC     DPTR
   \   00004D   7414         MOV     A,#0x14
   \   00004F   F0           MOVX    @DPTR,A
    224            Point_To_Point_DstAddr.addr.shortAddr = 0x0000; //∑¢∏¯–≠µ˜∆˜
   \   000050   90....       MOV     DPTR,#Point_To_Point_DstAddr
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   F0           MOVX    @DPTR,A
    225          
    226            // Fill out the endpoint description.
    227            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000057   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    228            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00005D   A3           INC     DPTR
   \   00005E   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000064   F0           MOVX    @DPTR,A
    229            SampleApp_epDesc.simpleDesc
    230                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006C   F0           MOVX    @DPTR,A
    231            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00006D   A3           INC     DPTR
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
    232          
    233            // Register the endpoint description with the AF
    234            afRegister( &SampleApp_epDesc );
   \   000070                ; Setup parameters for call to function afRegister
   \   000070   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000072   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000074   12....       LCALL   ??afRegister?relay
    235          
    236            // Register for all key events - This app will handle all key events
    237            RegisterForKeys( SampleApp_TaskID );
   \   000077                ; Setup parameters for call to function RegisterForKeys
   \   000077   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ??RegisterForKeys?relay
    238          
    239            // By default, all devices start out in Group 1
    240            SampleApp_Group.ID = 0x0001;
   \   00007F   90....       MOV     DPTR,#SampleApp_Group
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
    241            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008B   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00008E   F5..         MOV     ?V0 + 2,A
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C07         MOV     R4,#0x7
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009B   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00009D   12....       LCALL   ??osal_memcpy?relay
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
    242            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A5                ; Setup parameters for call to function aps_AddGroup
   \   0000A5   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A7   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A9   7914         MOV     R1,#0x14
   \   0000AB   12....       LCALL   ??aps_AddGroup?relay
    243          
    244          #if defined ( LCD_SUPPORTED )
    245            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000AE                ; Setup parameters for call to function HalLcdWriteString
   \   0000AE   7901         MOV     R1,#0x1
   \   0000B0   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B2   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B4   12....       LCALL   ??HalLcdWriteString?relay
    246          #endif
    247            
    248            osal_start_timerEx( SampleApp_TaskID,
    249                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    250                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   0000B7                ; Setup parameters for call to function osal_start_timerEx
   \   0000B7   12....       LCALL   ?Subroutine9 & 0xFFFF
    251          }
   \                     ??CrossCallReturnLabel_41:
   \   0000BA   7F03         MOV     R7,#0x3
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7CE8         MOV     R4,#-0x18
   \   000002   7D03         MOV     R5,#0x3
   \   000004                REQUIRE ??Subroutine10_0
   \   000004                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   7B00         MOV     R3,#0x0
   \   000004   90....       MOV     DPTR,#SampleApp_TaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??osal_start_timerEx?relay
   \   00000C   22           RET
    252          
    253          /*********************************************************************
    254           * @fn      SampleApp_ProcessEvent
    255           *
    256           * @brief   Generic Application Task event processor.  This function
    257           *          is called to process all events for the task.  Events
    258           *          include timers, messages and any other user defined events.
    259           *
    260           * @param   task_id  - The OSAL assigned task ID.
    261           * @param   events - events to process.  This is a bit map and can
    262           *                   contain more than one event.
    263           *
    264           * @return  none
    265           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    266          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    267          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    268            afIncomingMSGPacket_t *MSGpkt;
    269            (void)task_id;  // Intentionally unreferenced parameter
    270          
    271            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6062         JZ      ??SampleApp_ProcessEvent_0
    272            {
    273              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8014         SJMP    ??SampleApp_ProcessEvent_1
    274              while ( MSGpkt )
    275              {
    276                switch ( MSGpkt->hdr.event )
    277                {
    278                  // Received when a key is pressed
    279                  case KEY_CHANGE:
    280                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    281                    break;
    282          
    283                  // Received when a messages is received (OTA) for this endpoint
    284                  case AF_INCOMING_MSG_CMD:
    285                    SampleApp_MessageMSGCB( MSGpkt );
    286                    break;
    287          
    288                  // Received whenever the device changes state in the network
    289                  case ZDO_STATE_CHANGE:
    290                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    291                    if ( 
    292                         (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6406         XRL     A,#0x6
   \   000017   7003         JNZ     ??CrossCallReturnLabel_42
    293                    {
    294                      // Start sending the periodic message in a regular interval.
    295                      osal_start_timerEx( SampleApp_TaskID,
    296                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    297                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000019                ; Setup parameters for call to function osal_start_timerEx
   \   000019   12....       LCALL   ?Subroutine9 & 0xFFFF
    298                    }
    299                    else
    300                    {
    301                      // Device is no longer in the network
    302                    }
    303                    break;
    304          
    305                  default:
    306                    break;
    307                }
    308          
    309                // Release the memory
    310                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_42:
   \   00001C                ; Setup parameters for call to function osal_msg_deallocate
   \   00001C   AA..         MOV     R2,?V0 + 0
   \   00001E   AB..         MOV     R3,?V0 + 1
   \   000020   12....       LCALL   ??osal_msg_deallocate?relay
    311          
    312                // Next - if one is available
    313                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000023                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000023   90....       MOV     DPTR,#SampleApp_TaskID
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   12....       LCALL   ??osal_msg_receive?relay
   \   00002B   8A..         MOV     ?V0 + 0,R2
   \   00002D   8B..         MOV     ?V0 + 1,R3
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   45..         ORL     A,?V0 + 1
   \   000033   6032         JZ      ??SampleApp_ProcessEvent_3
   \   000035   85..82       MOV     DPL,?V0 + 0
   \   000038   85..83       MOV     DPH,?V0 + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   24E6         ADD     A,#-0x1a
   \   00003E   601E         JZ      ??SampleApp_ProcessEvent_4
   \   000040   245A         ADD     A,#0x5a
   \   000042   6006         JZ      ??SampleApp_ProcessEvent_5
   \   000044   24EF         ADD     A,#-0x11
   \   000046   60C7         JZ      ??SampleApp_ProcessEvent_2
   \   000048   80D2         SJMP    ??CrossCallReturnLabel_42
   \                     ??SampleApp_ProcessEvent_5:
   \   00004A                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FA           MOV     R2,A
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00005C   80BE         SJMP    ??CrossCallReturnLabel_42
   \                     ??SampleApp_ProcessEvent_4:
   \   00005E                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00005E   AA..         MOV     R2,?V0 + 0
   \   000060   AB..         MOV     R3,?V0 + 1
   \   000062   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000065   80B5         SJMP    ??CrossCallReturnLabel_42
    314              }
    315          
    316              // return unprocessed events
    317              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_3:
   \   000067   EE           MOV     A,R6
   \   000068   FA           MOV     R2,A
   \   000069   EF           MOV     A,R7
   \   00006A   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_6:
   \   00006C   FB           MOV     R3,A
   \   00006D   802F         SJMP    ??SampleApp_ProcessEvent_7
    318            }
    319          
    320            // Send a message out - This event is generated by a timer
    321            //  (setup in SampleApp_Init()).
    322            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00006F   EE           MOV     A,R6
   \   000070   A2E0         MOV     C,0xE0 /* A   */.0
   \   000072   5026         JNC     ??SampleApp_ProcessEvent_8
    323            {
    324              // Send the periodic message
    325              //SampleApp_SendPeriodicMessage();   
    326              EA=0;     //≥ı ºªØMPU6050
   \   000074   C2AF         CLR     0xa8.7
    327              MicroWait(2000);
   \   000076                ; Setup parameters for call to function Onboard_wait
   \   000076   7AD0         MOV     R2,#-0x30
   \   000078   7B07         MOV     R3,#0x7
   \   00007A   12....       LCALL   ??Onboard_wait?relay
    328              Multiple_read_MPU6050();
   \   00007D                ; Setup parameters for call to function Multiple_read_MPU6050
   \   00007D   12....       LCALL   ??Multiple_read_MPU6050?relay
    329              EA=1;
   \   000080   D2AF         SETB    0xa8.7
    330              SampleApp_SendPointToPointMessage();   
   \   000082                ; Setup parameters for call to function SampleApp_SendPointToPointMessage
   \   000082   12....       LCALL   ??SampleApp_SendPointToPointMessage?relay
    331              
    332              // Setup to send message again in normal period (+ a little jitter)
    333              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    334                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000085                ; Setup parameters for call to function osal_rand
   \   000085   12....       LCALL   ??osal_rand?relay
   \   000088                ; Setup parameters for call to function osal_start_timerEx
   \   000088   EA           MOV     A,R2
   \   000089   24E8         ADD     A,#-0x18
   \   00008B   FC           MOV     R4,A
   \   00008C   E4           CLR     A
   \   00008D   3403         ADDC    A,#0x3
   \   00008F   FD           MOV     R5,A
   \   000090   12....       LCALL   ??Subroutine10_0 & 0xFFFF
    335              // return unprocessed events
    336              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_43:
   \   000093   EE           MOV     A,R6
   \   000094   6401         XRL     A,#0x1
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   80D2         SJMP    ??SampleApp_ProcessEvent_6
    337            }
    338            // Discard unknown events
    339            return 0;
   \                     ??SampleApp_ProcessEvent_8:
   \   00009A   7A00         MOV     R2,#0x0
   \   00009C   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_7:
   \   00009E   7F04         MOV     R7,#0x4
   \   0000A0   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A3                REQUIRE _A_IEN0
    340          }
    341          
    342          /*********************************************************************
    343           * Event Generation Functions
    344           */
    345          /*********************************************************************
    346           * @fn      SampleApp_HandleKeys
    347           *
    348           * @brief   Handles all key events for this device.
    349           *
    350           * @param   shift - true if in shift/alt.
    351           * @param   keys - bit field for key events. Valid entries:
    352           *                 HAL_KEY_SW_2
    353           *                 HAL_KEY_SW_1
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    358          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    359            (void)shift;  // Intentionally unreferenced parameter
    360            
    361            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    362            {
    363              /* This key sends the Flash Command is sent to Group 1.
    364               * This device will not receive the Flash Command from this
    365               * device (even if it belongs to group 1).
    366               */
    367              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    368            }
    369          
    370            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    371            {
    372              /* The Flashr Command is sent to Group 1.
    373               * This key toggles this device in and out of group 1.
    374               * If this device doesn't belong to group 1, this application
    375               * will not receive the Flash command sent to group 1.
    376               */
    377              aps_Group_t *grp;
    378              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    379              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    380              {
    381                // Remove from the group
    382                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    383              }
    384              else
    385              {
    386                // Add to the flash group
    387                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    388              }
    389            }
    390          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine11_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    391          
    392          /*********************************************************************
    393           * LOCAL FUNCTIONS
    394           */
    395          
    396          /*********************************************************************
    397           * @fn      SampleApp_MessageMSGCB
    398           *
    399           * @brief   Data message processor callback.  This function processes
    400           *          any incoming data - probably from other devices.  So, based
    401           *          on cluster ID, perform the intended action.
    402           *
    403           * @param   none
    404           *
    405           * @return  none
    406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    407          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    408          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    409            uint16 flashTime;
    410            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6402         XRL     A,#0x2
   \   000010   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000014   703B         JNZ     ??SampleApp_MessageMSGCB_1
    411            {
    412          
    413              case SAMPLEAPP_FLASH_CLUSTERID:
    414                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    415                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000016   EA           MOV     A,R2
   \   000017   2422         ADD     A,#0x22
   \   000019   F582         MOV     DPL,A
   \   00001B   EB           MOV     A,R3
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025                ; Setup parameters for call to function HalLedBlink
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   2400         ADD     A,#0x0
   \   000037   F5..         MOV     ?V0 + 0,A
   \   000039   E4           CLR     A
   \   00003A   39           ADDC    A,R1
   \   00003B   F5..         MOV     ?V0 + 1,A
   \   00003D   7402         MOV     A,#0x2
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?US_SHR
   \   000044   AC..         MOV     R4,?V0 + 0
   \   000046   AD..         MOV     R5,?V0 + 1
   \   000048   7B32         MOV     R3,#0x32
   \   00004A   7A04         MOV     R2,#0x4
   \   00004C   7908         MOV     R1,#0x8
   \   00004E   12....       LCALL   ??HalLedBlink?relay
    416                break;
    417            }
    418          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000051   02....       LJMP    ??Subroutine11_0 & 0xFFFF
    419          
    420          /*********************************************************************
    421           * @fn      SampleApp_SendPeriodicMessage
    422           *
    423           * @brief   Send the periodic message.
    424           *
    425           * @param   none
    426           *
    427           * @return  none
    428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    429          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    430          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    431            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    432                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    433                                 1,
    434                                 (uint8*)&SampleAppPeriodicCounter,
    435                                 &SampleApp_TransID,
    436                                 AF_DISCV_ROUTE,
    437                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine0 & 0xFFFF
    438            {
    439            }
    440            else
    441            {
    442              // Error occurred in request to send.
    443            }
    444          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine11_0
   \   000003                ; // Fall through to label ??Subroutine11_0
    445          
    446          /*********************************************************************
    447           * @fn      SampleApp_SendFlashMessage
    448           *
    449           * @brief   Send the flash message to group 1.
    450           *
    451           * @param   flashTime - in milliseconds
    452           *
    453           * @return  none
    454           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    455          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    456          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    457            uint8 buffer[3];
    458            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    459            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    460            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    461          
    462            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    463                                 SAMPLEAPP_FLASH_CLUSTERID,
    464                                 3,
    465                                 buffer,
    466                                 &SampleApp_TransID,
    467                                 AF_DISCV_ROUTE,
    468                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    469            {
    470            }
    471            else
    472            {
    473              // Error occurred in request to send.
    474            }
    475          }
   \   000071   7403         MOV     A,#0x3
   \   000073   02....       LJMP    ?Subroutine0 & 0xFFFF
    476          
    477          /*********************************************************************
    478           * @fn      SampleApp_SendPointToPointMessage
    479           *
    480           * @brief   Send the flash message to point.
    481           *
    482           *
    483           * @return  none
    484           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    485          void SampleApp_SendPointToPointMessage( void )
   \                     SampleApp_SendPointToPointMessage:
    486          {    
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    487            uint8 buf[37];
    488            type_change(accX);
   \   00000A                ; Setup parameters for call to function type_change
   \   00000A   90....       MOV     DPTR,#accX
   \   00000D   12....       LCALL   ?Subroutine7 & 0xFFFF
    489            buf[0]=temp[0];  buf[1]=temp[1]; 
   \                     ??CrossCallReturnLabel_32:
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000019   C0E0         PUSH    A
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   D0E0         POP     A
   \   000022   12....       LCALL   ?Subroutine2 & 0xFFFF
    490            buf[2]=temp[2];  buf[3]=temp[3];
   \                     ??CrossCallReturnLabel_6:
   \   000025   C0E0         PUSH    A
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   D0E0         POP     A
   \   00002E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000031   C0E0         PUSH    A
   \   000033   7403         MOV     A,#0x3
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   D0E0         POP     A
   \   00003A   12....       LCALL   ?Subroutine4 & 0xFFFF
    491            buf[4]=temp[4];  buf[5]=temp[5];
   \                     ??CrossCallReturnLabel_18:
   \   00003D   C0E0         PUSH    A
   \   00003F   7404         MOV     A,#0x4
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   D0E0         POP     A
   \   000046   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000049   C0E0         PUSH    A
   \   00004B   7405         MOV     A,#0x5
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    492          
    493            type_change(accY);
   \   000053                ; Setup parameters for call to function type_change
   \   000053   90....       MOV     DPTR,#accY
   \   000056   12....       LCALL   ?Subroutine7 & 0xFFFF
    494            buf[6]=temp[0]; buf[7]=temp[1]; 
   \                     ??CrossCallReturnLabel_33:
   \   000059   C0E0         PUSH    A
   \   00005B   7406         MOV     A,#0x6
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   D0E0         POP     A
   \   000062   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000065   C0E0         PUSH    A
   \   000067   7407         MOV     A,#0x7
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   D0E0         POP     A
   \   00006E   12....       LCALL   ?Subroutine2 & 0xFFFF
    495            buf[8]=temp[2];  buf[9]=temp[3];
   \                     ??CrossCallReturnLabel_7:
   \   000071   C0E0         PUSH    A
   \   000073   7408         MOV     A,#0x8
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   D0E0         POP     A
   \   00007A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00007D   C0E0         PUSH    A
   \   00007F   7409         MOV     A,#0x9
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   D0E0         POP     A
   \   000086   12....       LCALL   ?Subroutine4 & 0xFFFF
    496            buf[10]=temp[4];  buf[11]=temp[5];
   \                     ??CrossCallReturnLabel_19:
   \   000089   C0E0         PUSH    A
   \   00008B   740A         MOV     A,#0xa
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   D0E0         POP     A
   \   000092   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000095   C0E0         PUSH    A
   \   000097   740B         MOV     A,#0xb
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   D0E0         POP     A
   \   00009E   F0           MOVX    @DPTR,A
    497            
    498            type_change(accZ);
   \   00009F                ; Setup parameters for call to function type_change
   \   00009F   90....       MOV     DPTR,#accZ
   \   0000A2   12....       LCALL   ?Subroutine7 & 0xFFFF
    499            buf[12]=temp[0];  buf[13]=temp[1]; 
   \                     ??CrossCallReturnLabel_34:
   \   0000A5   C0E0         PUSH    A
   \   0000A7   740C         MOV     A,#0xc
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   D0E0         POP     A
   \   0000AE   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000B1   C0E0         PUSH    A
   \   0000B3   740D         MOV     A,#0xd
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   D0E0         POP     A
   \   0000BA   12....       LCALL   ?Subroutine2 & 0xFFFF
    500            buf[14]=temp[2];  buf[15]=temp[3];
   \                     ??CrossCallReturnLabel_8:
   \   0000BD   C0E0         PUSH    A
   \   0000BF   740E         MOV     A,#0xe
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   D0E0         POP     A
   \   0000C6   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000C9   C0E0         PUSH    A
   \   0000CB   740F         MOV     A,#0xf
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   D0E0         POP     A
   \   0000D2   12....       LCALL   ?Subroutine4 & 0xFFFF
    501            buf[16]=temp[4];  buf[17]=temp[5];
   \                     ??CrossCallReturnLabel_20:
   \   0000D5   C0E0         PUSH    A
   \   0000D7   7410         MOV     A,#0x10
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   D0E0         POP     A
   \   0000DE   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000E1   C0E0         PUSH    A
   \   0000E3   7411         MOV     A,#0x11
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   D0E0         POP     A
   \   0000EA   F0           MOVX    @DPTR,A
    502            
    503            type_change(graX);
   \   0000EB                ; Setup parameters for call to function type_change
   \   0000EB   90....       MOV     DPTR,#graX
   \   0000EE   12....       LCALL   ?Subroutine7 & 0xFFFF
    504            buf[18]=temp[0];  buf[19]=temp[1]; 
   \                     ??CrossCallReturnLabel_35:
   \   0000F1   C0E0         PUSH    A
   \   0000F3   7412         MOV     A,#0x12
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   D0E0         POP     A
   \   0000FA   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000FD   C0E0         PUSH    A
   \   0000FF   7413         MOV     A,#0x13
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   D0E0         POP     A
   \   000106   12....       LCALL   ?Subroutine2 & 0xFFFF
    505            buf[20]=temp[2];  buf[21]=temp[3];
   \                     ??CrossCallReturnLabel_9:
   \   000109   C0E0         PUSH    A
   \   00010B   7414         MOV     A,#0x14
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   D0E0         POP     A
   \   000112   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000115   C0E0         PUSH    A
   \   000117   7415         MOV     A,#0x15
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   D0E0         POP     A
   \   00011E   12....       LCALL   ?Subroutine4 & 0xFFFF
    506            buf[22]=temp[4];  buf[23]=temp[5];
   \                     ??CrossCallReturnLabel_21:
   \   000121   C0E0         PUSH    A
   \   000123   7416         MOV     A,#0x16
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   D0E0         POP     A
   \   00012A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00012D   C0E0         PUSH    A
   \   00012F   7417         MOV     A,#0x17
   \   000131   12....       LCALL   ?XSTACK_DISP0_8
   \   000134   D0E0         POP     A
   \   000136   F0           MOVX    @DPTR,A
    507          
    508            type_change(graY);
   \   000137                ; Setup parameters for call to function type_change
   \   000137   90....       MOV     DPTR,#graY
   \   00013A   12....       LCALL   ?Subroutine7 & 0xFFFF
    509            buf[24]=temp[0];  buf[25]=temp[1]; 
   \                     ??CrossCallReturnLabel_36:
   \   00013D   C0E0         PUSH    A
   \   00013F   7418         MOV     A,#0x18
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   D0E0         POP     A
   \   000146   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000149   C0E0         PUSH    A
   \   00014B   7419         MOV     A,#0x19
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   D0E0         POP     A
   \   000152   12....       LCALL   ?Subroutine2 & 0xFFFF
    510            buf[26]=temp[2];  buf[27]=temp[3];
   \                     ??CrossCallReturnLabel_10:
   \   000155   C0E0         PUSH    A
   \   000157   741A         MOV     A,#0x1a
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   D0E0         POP     A
   \   00015E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000161   C0E0         PUSH    A
   \   000163   741B         MOV     A,#0x1b
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   D0E0         POP     A
   \   00016A   12....       LCALL   ?Subroutine4 & 0xFFFF
    511            buf[28]=temp[4];  buf[29]=temp[5];
   \                     ??CrossCallReturnLabel_22:
   \   00016D   C0E0         PUSH    A
   \   00016F   741C         MOV     A,#0x1c
   \   000171   12....       LCALL   ?XSTACK_DISP0_8
   \   000174   D0E0         POP     A
   \   000176   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000179   C0E0         PUSH    A
   \   00017B   741D         MOV     A,#0x1d
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   D0E0         POP     A
   \   000182   F0           MOVX    @DPTR,A
    512          
    513            type_change(graZ);
   \   000183                ; Setup parameters for call to function type_change
   \   000183   90....       MOV     DPTR,#graZ
   \   000186   12....       LCALL   ?Subroutine7 & 0xFFFF
    514            buf[30]=temp[0];  buf[31]=temp[1]; 
   \                     ??CrossCallReturnLabel_37:
   \   000189   C0E0         PUSH    A
   \   00018B   741E         MOV     A,#0x1e
   \   00018D   12....       LCALL   ?XSTACK_DISP0_8
   \   000190   D0E0         POP     A
   \   000192   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000195   C0E0         PUSH    A
   \   000197   741F         MOV     A,#0x1f
   \   000199   12....       LCALL   ?XSTACK_DISP0_8
   \   00019C   D0E0         POP     A
   \   00019E   12....       LCALL   ?Subroutine2 & 0xFFFF
    515            buf[32]=temp[2];  buf[33]=temp[3];
   \                     ??CrossCallReturnLabel_11:
   \   0001A1   C0E0         PUSH    A
   \   0001A3   7420         MOV     A,#0x20
   \   0001A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A8   D0E0         POP     A
   \   0001AA   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001AD   C0E0         PUSH    A
   \   0001AF   7421         MOV     A,#0x21
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   D0E0         POP     A
   \   0001B6   12....       LCALL   ?Subroutine4 & 0xFFFF
    516            buf[34]=temp[4];  buf[35]=temp[5];
   \                     ??CrossCallReturnLabel_23:
   \   0001B9   C0E0         PUSH    A
   \   0001BB   7422         MOV     A,#0x22
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   D0E0         POP     A
   \   0001C2   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001C5   C0E0         PUSH    A
   \   0001C7   7423         MOV     A,#0x23
   \   0001C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CC   D0E0         POP     A
   \   0001CE   F0           MOVX    @DPTR,A
    517            buf[36]= 'D';
   \   0001CF   7424         MOV     A,#0x24
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   7444         MOV     A,#0x44
   \   0001D6   F0           MOVX    @DPTR,A
    518            HalLedBlink( HAL_LED_1, 4, 50, 200 );
   \   0001D7                ; Setup parameters for call to function HalLedBlink
   \   0001D7   7CC8         MOV     R4,#-0x38
   \   0001D9   7D00         MOV     R5,#0x0
   \   0001DB   7B32         MOV     R3,#0x32
   \   0001DD   7A04         MOV     R2,#0x4
   \   0001DF   7901         MOV     R1,#0x1
   \   0001E1   12....       LCALL   ??HalLedBlink?relay
    519            if ( AF_DataRequest( &Point_To_Point_DstAddr,
    520                                 &SampleApp_epDesc,
    521                                 SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
    522                                 37,
    523                                 buf,
    524                                 &SampleApp_TransID,
    525                                 AF_DISCV_ROUTE,
    526                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0001E4                ; Setup parameters for call to function AF_DataRequest
   \   0001E4   75..1E       MOV     ?V0 + 0,#0x1e
   \   0001E7   78..         MOV     R0,#?V0 + 0
   \   0001E9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001EC   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0001EF   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0001F2   78..         MOV     R0,#?V0 + 0
   \   0001F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F7   7403         MOV     A,#0x3
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   8582..       MOV     ?V0 + 0,DPL
   \   0001FF   8583..       MOV     ?V0 + 1,DPH
   \   000202   78..         MOV     R0,#?V0 + 0
   \   000204   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000207   75..25       MOV     ?V0 + 0,#0x25
   \   00020A   75..00       MOV     ?V0 + 1,#0x0
   \   00020D   78..         MOV     R0,#?V0 + 0
   \   00020F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000212   75..03       MOV     ?V0 + 0,#0x3
   \   000215   78..         MOV     R0,#?V0 + 0
   \   000217   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021A   7920         MOV     R1,#0x20
   \   00021C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00021E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000220   7A..         MOV     R2,#Point_To_Point_DstAddr & 0xff
   \   000222   7B..         MOV     R3,#(Point_To_Point_DstAddr >> 8) & 0xff
   \   000224   12....       LCALL   ??AF_DataRequest?relay
   \   000227   7409         MOV     A,#0x9
   \   000229   12....       LCALL   ?DEALLOC_XSTACK8
    527            {
    528            }
    529           else
    530            {
    531              // Error occurred in request to send.
    532            }
    533          }
   \   00022C   7425         MOV     A,#0x25
   \   00022E                REQUIRE ?Subroutine0
   \   00022E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??type_change?relay
   \   000008   90....       MOV     DPTR,#temp
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#temp + 5
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#temp + 4
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#temp + 3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#temp + 2
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#temp + 1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    534          
    535          /*********************************************************
    536          **************** ˝æ›∫œ≥…∫Ø ˝**************************
    537          *********************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    538          void type_change(int num)
   \                     type_change:
    539          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
    540            if(num<0)
   \   000008   C3           CLR     C
   \   000009   9400         SUBB    A,#0x0
   \   00000B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00000D   65D0         XRL     A,PSW
   \   00000F   33           RLC     A
   \   000010   5012         JNC     ??type_change_0
    541            {
    542              num = -num;
   \   000012   C3           CLR     C
   \   000013   E4           CLR     A
   \   000014   9C           SUBB    A,R4
   \   000015   F8           MOV     R0,A
   \   000016   E4           CLR     A
   \   000017   9D           SUBB    A,R5
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   FC           MOV     R4,A
   \   00001B   E9           MOV     A,R1
   \   00001C   FD           MOV     R5,A
    543              temp[0] = '-';
   \   00001D   90....       MOV     DPTR,#temp
   \   000020   742D         MOV     A,#0x2d
   \   000022   8005         SJMP    ??type_change_1
    544            }
    545            else
    546            {
    547              temp[0] = '+';
   \                     ??type_change_0:
   \   000024   90....       MOV     DPTR,#temp
   \   000027   742B         MOV     A,#0x2b
    548            }
   \                     ??type_change_1:
   \   000029   12....       LCALL   ?Subroutine6 & 0xFFFF
    549            temp[1] = num/10000+0x30;
   \                     ??CrossCallReturnLabel_30:
   \   00002C   12....       LCALL   ?S_DIV_MOD
   \   00002F   E8           MOV     A,R0
   \   000030   2430         ADD     A,#0x30
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ?Subroutine6 & 0xFFFF
    550            temp[2] = num%10000/1000+0x30;
   \                     ??CrossCallReturnLabel_31:
   \   000036   12....       LCALL   ?S_DIV_MOD
   \   000039   EA           MOV     A,R2
   \   00003A   F8           MOV     R0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   F9           MOV     R1,A
   \   00003D   7AE8         MOV     R2,#-0x18
   \   00003F   7B03         MOV     R3,#0x3
   \   000041   12....       LCALL   ?S_DIV_MOD
   \   000044   12....       LCALL   ?Subroutine8 & 0xFFFF
    551            temp[3] = num%1000/100+0x30;
   \                     ??CrossCallReturnLabel_38:
   \   000047   7AE8         MOV     R2,#-0x18
   \   000049   7B03         MOV     R3,#0x3
   \   00004B   12....       LCALL   ?S_DIV_MOD
   \   00004E   EA           MOV     A,R2
   \   00004F   F8           MOV     R0,A
   \   000050   EB           MOV     A,R3
   \   000051   F9           MOV     R1,A
   \   000052   7A64         MOV     R2,#0x64
   \   000054   7B00         MOV     R3,#0x0
   \   000056   12....       LCALL   ?S_DIV_MOD
   \   000059   12....       LCALL   ?Subroutine8 & 0xFFFF
    552            temp[4] = num%100/10+0x30;
   \                     ??CrossCallReturnLabel_39:
   \   00005C   7A64         MOV     R2,#0x64
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   12....       LCALL   ?S_DIV_MOD
   \   000063   EA           MOV     A,R2
   \   000064   F8           MOV     R0,A
   \   000065   EB           MOV     A,R3
   \   000066   F9           MOV     R1,A
   \   000067   7A0A         MOV     R2,#0xa
   \   000069   7B00         MOV     R3,#0x0
   \   00006B   12....       LCALL   ?S_DIV_MOD
   \   00006E   12....       LCALL   ?Subroutine8 & 0xFFFF
    553            temp[5] = num%10+0x30;
   \                     ??CrossCallReturnLabel_40:
   \   000071   7A0A         MOV     R2,#0xa
   \   000073   7B00         MOV     R3,#0x0
   \   000075   12....       LCALL   ?S_DIV_MOD
   \   000078   EA           MOV     A,R2
   \   000079   2430         ADD     A,#0x30
   \   00007B   A3           INC     DPTR
   \   00007C   F0           MOVX    @DPTR,A
    554          }
   \   00007D   D083         POP     DPH
   \   00007F   D082         POP     DPL
   \   000081   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV     A,R0
   \   000001   2430         ADD     A,#0x30
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EC           MOV     A,R4
   \   000006   F8           MOV     R0,A
   \   000007   ED           MOV     A,R5
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   F8           MOV     R0,A
   \   000003   ED           MOV     A,R5
   \   000004   F9           MOV     R1,A
   \   000005   7A10         MOV     R2,#0x10
   \   000007   7B27         MOV     R3,#0x27
   \   000009   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPointToPointMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPointToPointMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??type_change?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    type_change

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> ALLInit                       0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
       -> osal_start_timerEx            0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> Onboard_wait                  0      0     24
       -> Multiple_read_MPU6050         0      0     24
       -> SampleApp_SendPointToPointMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_SendPointToPointMessage
                                        1      0     68
       -> type_change                   0      0     94
       -> type_change                   0      0     94
       -> type_change                   0      0     94
       -> type_change                   0      0     94
       -> type_change                   0      0     94
       -> type_change                   0      0     94
       -> HalLedBlink                   0      0     94
       -> AF_DataRequest                0      0    112
     type_change                        2      0     47


   Segment part sizes:

     Function/Label                            Bytes
     --------------                            -----
     _A_IEN0                                      1
     SampleApp_ClusterList                        4
     SampleApp_SimpleDesc                        12
     SampleApp_epDesc                             6
     SampleApp_TaskID                             1
     SampleApp_NwkState                           1
     SampleApp_TransID                            1
     SampleApp_Periodic_DstAddr                  12
     SampleApp_Flash_DstAddr                     12
     Point_To_Point_DstAddr                      12
     SampleApp_Group                             18
     SampleAppPeriodicCounter                     1
     SampleAppFlashCounter                        1
     temp                                         6
     SampleApp_Init                             191
     ?Subroutine9                                 4
     ??Subroutine10_0                            13
     SampleApp_ProcessEvent                     163
     SampleApp_HandleKeys                        62
     ??Subroutine11_0                             5
     SampleApp_MessageMSGCB                      84
     SampleApp_SendPeriodicMessage               69
     ?Subroutine0                                 3
     SampleApp_SendFlashMessage                 118
     SampleApp_SendPointToPointMessage
                                                558
     ?Subroutine7                                13
     ?Subroutine5                                 6
     ?Subroutine4                                 6
     ?Subroutine3                                 6
     ?Subroutine2                                 6
     ?Subroutine1                                 6
     type_change                                132
     ?Subroutine8                                10
     ?Subroutine6                                10
     ??SampleApp_Init?relay                       6
     ??SampleApp_ProcessEvent?relay               6
     ??SampleApp_HandleKeys?relay                 6
     ??SampleApp_MessageMSGCB?relay               6
     ??SampleApp_SendPeriodicMessage?relay        6
     ??SampleApp_SendFlashMessage?relay           6
     ??SampleApp_SendPointToPointMessage?relay    6
     ??type_change?relay                          6
     ?<Constant "Group 1">                        8
     ?<Constant "SampleApp">                     10

 
 1 465 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    34 bytes in segment XDATA_ROM_C
    71 bytes in segment XDATA_Z
 
 1 513 bytes of CODE  memory
    34 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    71 bytes of XDATA memory

Errors: none
Warnings: none
